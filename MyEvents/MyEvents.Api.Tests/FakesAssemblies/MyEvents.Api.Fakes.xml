<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyEvents.Api.Fakes</name>
    </assembly>
    <members>
        <member name="T:MyEvents.Api.App_Start.Fakes.ShimDependencyConfig">
            <summary>Shim type of MyEvents.Api.App_Start.DependencyConfig</summary>
        </member>
        <member name="M:MyEvents.Api.App_Start.Fakes.ShimDependencyConfig.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:MyEvents.Api.App_Start.Fakes.ShimDependencyConfig.#ctor(MyEvents.Api.App_Start.DependencyConfig)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:MyEvents.Api.App_Start.Fakes.ShimDependencyConfig.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MyEvents.Api.App_Start.Fakes.ShimDependencyConfig.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MyEvents.Api.App_Start.Fakes.ShimDependencyConfig.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MyEvents.Api.App_Start.Fakes.ShimDependencyConfig.Constructor">
            <summary>Sets the shim of DependencyConfig.DependencyConfig()</summary>
        </member>
        <member name="P:MyEvents.Api.App_Start.Fakes.ShimDependencyConfig.ResolveDependenciesHttpConfiguration">
            <summary>Sets the shim of DependencyConfig.ResolveDependencies(HttpConfiguration config)</summary>
        </member>
        <member name="T:MyEvents.Api.App_Start.Fakes.ShimDependencyConfig.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:MyEvents.Api.App_Start.Fakes.ShimDocumentationConfig">
            <summary>Shim type of MyEvents.Api.App_Start.DocumentationConfig</summary>
        </member>
        <member name="M:MyEvents.Api.App_Start.Fakes.ShimDocumentationConfig.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:MyEvents.Api.App_Start.Fakes.ShimDocumentationConfig.#ctor(MyEvents.Api.App_Start.DocumentationConfig)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:MyEvents.Api.App_Start.Fakes.ShimDocumentationConfig.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MyEvents.Api.App_Start.Fakes.ShimDocumentationConfig.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MyEvents.Api.App_Start.Fakes.ShimDocumentationConfig.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MyEvents.Api.App_Start.Fakes.ShimDocumentationConfig.ConfigureHttpConfiguration">
            <summary>Sets the shim of DocumentationConfig.Configure(HttpConfiguration config)</summary>
        </member>
        <member name="P:MyEvents.Api.App_Start.Fakes.ShimDocumentationConfig.Constructor">
            <summary>Sets the shim of DocumentationConfig.DocumentationConfig()</summary>
        </member>
        <member name="T:MyEvents.Api.App_Start.Fakes.ShimDocumentationConfig.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:MyEvents.Api.App_Start.Fakes.ShimFilterConfig">
            <summary>Shim type of MyEvents.Api.App_Start.FilterConfig</summary>
        </member>
        <member name="M:MyEvents.Api.App_Start.Fakes.ShimFilterConfig.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:MyEvents.Api.App_Start.Fakes.ShimFilterConfig.#ctor(MyEvents.Api.App_Start.FilterConfig)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:MyEvents.Api.App_Start.Fakes.ShimFilterConfig.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MyEvents.Api.App_Start.Fakes.ShimFilterConfig.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MyEvents.Api.App_Start.Fakes.ShimFilterConfig.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MyEvents.Api.App_Start.Fakes.ShimFilterConfig.Constructor">
            <summary>Sets the shim of FilterConfig.FilterConfig()</summary>
        </member>
        <member name="P:MyEvents.Api.App_Start.Fakes.ShimFilterConfig.RegisterGlobalFiltersGlobalFilterCollection">
            <summary>Sets the shim of FilterConfig.RegisterGlobalFilters(GlobalFilterCollection filters)</summary>
        </member>
        <member name="T:MyEvents.Api.App_Start.Fakes.ShimFilterConfig.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:MyEvents.Api.App_Start.Fakes.ShimFormatConfig">
            <summary>Shim type of MyEvents.Api.App_Start.FormatConfig</summary>
        </member>
        <member name="M:MyEvents.Api.App_Start.Fakes.ShimFormatConfig.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:MyEvents.Api.App_Start.Fakes.ShimFormatConfig.#ctor(MyEvents.Api.App_Start.FormatConfig)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:MyEvents.Api.App_Start.Fakes.ShimFormatConfig.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MyEvents.Api.App_Start.Fakes.ShimFormatConfig.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MyEvents.Api.App_Start.Fakes.ShimFormatConfig.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MyEvents.Api.App_Start.Fakes.ShimFormatConfig.ConfigureFormatsHttpConfiguration">
            <summary>Sets the shim of FormatConfig.ConfigureFormats(HttpConfiguration config)</summary>
        </member>
        <member name="P:MyEvents.Api.App_Start.Fakes.ShimFormatConfig.Constructor">
            <summary>Sets the shim of FormatConfig.FormatConfig()</summary>
        </member>
        <member name="T:MyEvents.Api.App_Start.Fakes.ShimFormatConfig.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:MyEvents.Api.App_Start.Fakes.ShimRouteConfig">
            <summary>Shim type of MyEvents.Api.App_Start.RouteConfig</summary>
        </member>
        <member name="M:MyEvents.Api.App_Start.Fakes.ShimRouteConfig.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:MyEvents.Api.App_Start.Fakes.ShimRouteConfig.#ctor(MyEvents.Api.App_Start.RouteConfig)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:MyEvents.Api.App_Start.Fakes.ShimRouteConfig.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MyEvents.Api.App_Start.Fakes.ShimRouteConfig.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MyEvents.Api.App_Start.Fakes.ShimRouteConfig.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MyEvents.Api.App_Start.Fakes.ShimRouteConfig.Constructor">
            <summary>Sets the shim of RouteConfig.RouteConfig()</summary>
        </member>
        <member name="P:MyEvents.Api.App_Start.Fakes.ShimRouteConfig.RegisterRoutesRouteCollection">
            <summary>Sets the shim of RouteConfig.RegisterRoutes(RouteCollection routes)</summary>
        </member>
        <member name="T:MyEvents.Api.App_Start.Fakes.ShimRouteConfig.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:MyEvents.Api.App_Start.Fakes.ShimTraceConfig">
            <summary>Shim type of MyEvents.Api.App_Start.TraceConfig</summary>
        </member>
        <member name="M:MyEvents.Api.App_Start.Fakes.ShimTraceConfig.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:MyEvents.Api.App_Start.Fakes.ShimTraceConfig.#ctor(MyEvents.Api.App_Start.TraceConfig)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:MyEvents.Api.App_Start.Fakes.ShimTraceConfig.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MyEvents.Api.App_Start.Fakes.ShimTraceConfig.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MyEvents.Api.App_Start.Fakes.ShimTraceConfig.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MyEvents.Api.App_Start.Fakes.ShimTraceConfig.Constructor">
            <summary>Sets the shim of TraceConfig.TraceConfig()</summary>
        </member>
        <member name="P:MyEvents.Api.App_Start.Fakes.ShimTraceConfig.RegisterListenerHttpConfiguration">
            <summary>Sets the shim of TraceConfig.RegisterListener(HttpConfiguration config)</summary>
        </member>
        <member name="T:MyEvents.Api.App_Start.Fakes.ShimTraceConfig.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:MyEvents.Api.App_Start.Fakes.StubDependencyConfig">
            <summary>Stub type of MyEvents.Api.App_Start.DependencyConfig</summary>
        </member>
        <member name="M:MyEvents.Api.App_Start.Fakes.StubDependencyConfig.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:MyEvents.Api.App_Start.Fakes.StubDependencyConfig.InitializeStub">
            <summary>Initializes a new instance of type StubDependencyConfig</summary>
        </member>
        <member name="P:MyEvents.Api.App_Start.Fakes.StubDependencyConfig.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:MyEvents.Api.App_Start.Fakes.StubDependencyConfig.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:MyEvents.Api.App_Start.Fakes.StubDependencyConfig.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:MyEvents.Api.App_Start.Fakes.StubDocumentationConfig">
            <summary>Stub type of MyEvents.Api.App_Start.DocumentationConfig</summary>
        </member>
        <member name="M:MyEvents.Api.App_Start.Fakes.StubDocumentationConfig.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:MyEvents.Api.App_Start.Fakes.StubDocumentationConfig.InitializeStub">
            <summary>Initializes a new instance of type StubDocumentationConfig</summary>
        </member>
        <member name="P:MyEvents.Api.App_Start.Fakes.StubDocumentationConfig.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:MyEvents.Api.App_Start.Fakes.StubDocumentationConfig.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:MyEvents.Api.App_Start.Fakes.StubDocumentationConfig.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:MyEvents.Api.App_Start.Fakes.StubFilterConfig">
            <summary>Stub type of MyEvents.Api.App_Start.FilterConfig</summary>
        </member>
        <member name="M:MyEvents.Api.App_Start.Fakes.StubFilterConfig.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:MyEvents.Api.App_Start.Fakes.StubFilterConfig.InitializeStub">
            <summary>Initializes a new instance of type StubFilterConfig</summary>
        </member>
        <member name="P:MyEvents.Api.App_Start.Fakes.StubFilterConfig.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:MyEvents.Api.App_Start.Fakes.StubFilterConfig.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:MyEvents.Api.App_Start.Fakes.StubFilterConfig.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:MyEvents.Api.App_Start.Fakes.StubFormatConfig">
            <summary>Stub type of MyEvents.Api.App_Start.FormatConfig</summary>
        </member>
        <member name="M:MyEvents.Api.App_Start.Fakes.StubFormatConfig.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:MyEvents.Api.App_Start.Fakes.StubFormatConfig.InitializeStub">
            <summary>Initializes a new instance of type StubFormatConfig</summary>
        </member>
        <member name="P:MyEvents.Api.App_Start.Fakes.StubFormatConfig.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:MyEvents.Api.App_Start.Fakes.StubFormatConfig.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:MyEvents.Api.App_Start.Fakes.StubFormatConfig.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:MyEvents.Api.App_Start.Fakes.StubRouteConfig">
            <summary>Stub type of MyEvents.Api.App_Start.RouteConfig</summary>
        </member>
        <member name="M:MyEvents.Api.App_Start.Fakes.StubRouteConfig.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:MyEvents.Api.App_Start.Fakes.StubRouteConfig.InitializeStub">
            <summary>Initializes a new instance of type StubRouteConfig</summary>
        </member>
        <member name="P:MyEvents.Api.App_Start.Fakes.StubRouteConfig.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:MyEvents.Api.App_Start.Fakes.StubRouteConfig.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:MyEvents.Api.App_Start.Fakes.StubRouteConfig.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:MyEvents.Api.App_Start.Fakes.StubTraceConfig">
            <summary>Stub type of MyEvents.Api.App_Start.TraceConfig</summary>
        </member>
        <member name="M:MyEvents.Api.App_Start.Fakes.StubTraceConfig.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:MyEvents.Api.App_Start.Fakes.StubTraceConfig.InitializeStub">
            <summary>Initializes a new instance of type StubTraceConfig</summary>
        </member>
        <member name="P:MyEvents.Api.App_Start.Fakes.StubTraceConfig.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:MyEvents.Api.App_Start.Fakes.StubTraceConfig.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:MyEvents.Api.App_Start.Fakes.StubTraceConfig.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:MyEvents.Api.Authentication.Fakes.ShimAuthenticationResponse">
            <summary>Shim type of MyEvents.Api.Authentication.AuthenticationResponse</summary>
        </member>
        <member name="M:MyEvents.Api.Authentication.Fakes.ShimAuthenticationResponse.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:MyEvents.Api.Authentication.Fakes.ShimAuthenticationResponse.#ctor(MyEvents.Api.Authentication.AuthenticationResponse)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:MyEvents.Api.Authentication.Fakes.ShimAuthenticationResponse.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MyEvents.Api.Authentication.Fakes.ShimAuthenticationResponse.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.ShimAuthenticationResponse.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.ShimAuthenticationResponse.Constructor">
            <summary>Sets the shim of AuthenticationResponse.AuthenticationResponse()</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.ShimAuthenticationResponse.ExpirationTimeGet">
            <summary>Sets the shim of AuthenticationResponse.get_ExpirationTime()</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.ShimAuthenticationResponse.ExpirationTimeSetDouble">
            <summary>Sets the shim of AuthenticationResponse.set_ExpirationTime(Double value)</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.ShimAuthenticationResponse.FacebookUserIdGet">
            <summary>Sets the shim of AuthenticationResponse.get_FacebookUserId()</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.ShimAuthenticationResponse.FacebookUserIdSetString">
            <summary>Sets the shim of AuthenticationResponse.set_FacebookUserId(String value)</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.ShimAuthenticationResponse.RegisteredUserIdGet">
            <summary>Sets the shim of AuthenticationResponse.get_RegisteredUserId()</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.ShimAuthenticationResponse.RegisteredUserIdSetInt32">
            <summary>Sets the shim of AuthenticationResponse.set_RegisteredUserId(Int32 value)</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.ShimAuthenticationResponse.TokenGet">
            <summary>Sets the shim of AuthenticationResponse.get_Token()</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.ShimAuthenticationResponse.TokenSetString">
            <summary>Sets the shim of AuthenticationResponse.set_Token(String value)</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.ShimAuthenticationResponse.UserNameGet">
            <summary>Sets the shim of AuthenticationResponse.get_UserName()</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.ShimAuthenticationResponse.UserNameSetString">
            <summary>Sets the shim of AuthenticationResponse.set_UserName(String value)</summary>
        </member>
        <member name="T:MyEvents.Api.Authentication.Fakes.ShimAuthenticationResponse.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.ShimAuthenticationResponse.AllInstances.ExpirationTimeGet">
            <summary>Sets the shim of AuthenticationResponse.get_ExpirationTime()</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.ShimAuthenticationResponse.AllInstances.ExpirationTimeSetDouble">
            <summary>Sets the shim of AuthenticationResponse.set_ExpirationTime(Double value)</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.ShimAuthenticationResponse.AllInstances.FacebookUserIdGet">
            <summary>Sets the shim of AuthenticationResponse.get_FacebookUserId()</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.ShimAuthenticationResponse.AllInstances.FacebookUserIdSetString">
            <summary>Sets the shim of AuthenticationResponse.set_FacebookUserId(String value)</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.ShimAuthenticationResponse.AllInstances.RegisteredUserIdGet">
            <summary>Sets the shim of AuthenticationResponse.get_RegisteredUserId()</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.ShimAuthenticationResponse.AllInstances.RegisteredUserIdSetInt32">
            <summary>Sets the shim of AuthenticationResponse.set_RegisteredUserId(Int32 value)</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.ShimAuthenticationResponse.AllInstances.TokenGet">
            <summary>Sets the shim of AuthenticationResponse.get_Token()</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.ShimAuthenticationResponse.AllInstances.TokenSetString">
            <summary>Sets the shim of AuthenticationResponse.set_Token(String value)</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.ShimAuthenticationResponse.AllInstances.UserNameGet">
            <summary>Sets the shim of AuthenticationResponse.get_UserName()</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.ShimAuthenticationResponse.AllInstances.UserNameSetString">
            <summary>Sets the shim of AuthenticationResponse.set_UserName(String value)</summary>
        </member>
        <member name="T:MyEvents.Api.Authentication.Fakes.ShimAuthorizeAttribute">
            <summary>Shim type of MyEvents.Api.Authentication.AuthorizeAttribute</summary>
        </member>
        <member name="M:MyEvents.Api.Authentication.Fakes.ShimAuthorizeAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:MyEvents.Api.Authentication.Fakes.ShimAuthorizeAttribute.#ctor(MyEvents.Api.Authentication.AuthorizeAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:MyEvents.Api.Authentication.Fakes.ShimAuthorizeAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MyEvents.Api.Authentication.Fakes.ShimAuthorizeAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MyEvents.Api.Authentication.Fakes.ShimAuthorizeAttribute.Bind(System.Web.Http.Filters.IAuthorizationFilter)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:MyEvents.Api.Authentication.Fakes.ShimAuthorizeAttribute.Bind(System.Web.Http.Filters.IFilter)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.ShimAuthorizeAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.ShimAuthorizeAttribute.Constructor">
            <summary>Sets the shim of AuthorizeAttribute.AuthorizeAttribute()</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.ShimAuthorizeAttribute.OnAuthorizationHttpActionContext">
            <summary>Sets the shim of AuthorizeAttribute.OnAuthorization(HttpActionContext actionContext)</summary>
        </member>
        <member name="T:MyEvents.Api.Authentication.Fakes.ShimAuthorizeAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.ShimAuthorizeAttribute.AllInstances.OnAuthorizationHttpActionContext">
            <summary>Sets the shim of AuthorizeAttribute.OnAuthorization(HttpActionContext actionContext)</summary>
        </member>
        <member name="T:MyEvents.Api.Authentication.Fakes.ShimFacebookService">
            <summary>Shim type of MyEvents.Api.Authentication.FacebookService</summary>
        </member>
        <member name="M:MyEvents.Api.Authentication.Fakes.ShimFacebookService.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:MyEvents.Api.Authentication.Fakes.ShimFacebookService.#ctor(MyEvents.Api.Authentication.FacebookService)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:MyEvents.Api.Authentication.Fakes.ShimFacebookService.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MyEvents.Api.Authentication.Fakes.ShimFacebookService.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MyEvents.Api.Authentication.Fakes.ShimFacebookService.Bind(MyEvents.Api.Authentication.IFacebookService)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.ShimFacebookService.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.ShimFacebookService.Constructor">
            <summary>Sets the shim of FacebookService.FacebookService()</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.ShimFacebookService.GetInformationString">
            <summary>Sets the shim of FacebookService.GetInformation(String token)</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.ShimFacebookService.GetUserInformationString">
            <summary>Sets the shim of FacebookService.GetUserInformation(String token)</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.ShimFacebookService.ParseString">
            <summary>Sets the shim of FacebookService.Parse(String userInformationAsJson)</summary>
        </member>
        <member name="T:MyEvents.Api.Authentication.Fakes.ShimFacebookService.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.ShimFacebookService.AllInstances.GetUserInformationString">
            <summary>Sets the shim of FacebookService.GetUserInformation(String token)</summary>
        </member>
        <member name="T:MyEvents.Api.Authentication.Fakes.ShimMyEventsToken">
            <summary>Shim type of MyEvents.Api.Authentication.MyEventsToken</summary>
        </member>
        <member name="M:MyEvents.Api.Authentication.Fakes.ShimMyEventsToken.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:MyEvents.Api.Authentication.Fakes.ShimMyEventsToken.#ctor(MyEvents.Api.Authentication.MyEventsToken)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:MyEvents.Api.Authentication.Fakes.ShimMyEventsToken.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MyEvents.Api.Authentication.Fakes.ShimMyEventsToken.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.ShimMyEventsToken.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.ShimMyEventsToken.ConstructorString">
            <summary>Sets the shim of MyEventsToken.MyEventsToken(String token)</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.ShimMyEventsToken.CreateTokenInt32">
            <summary>Sets the shim of MyEventsToken.CreateToken(Int32 registeredUserId)</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.ShimMyEventsToken.DecryptString">
            <summary>Sets the shim of MyEventsToken.Decrypt(String data)</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.ShimMyEventsToken.EncryptString">
            <summary>Sets the shim of MyEventsToken.Encrypt(String data)</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.ShimMyEventsToken.GetTokenFromHeader">
            <summary>Sets the shim of MyEventsToken.GetTokenFromHeader()</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.ShimMyEventsToken.IsExpired">
            <summary>Sets the shim of MyEventsToken.IsExpired()</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.ShimMyEventsToken.RegisteredUserIdGet">
            <summary>Sets the shim of MyEventsToken.get_RegisteredUserId()</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.ShimMyEventsToken.RegisteredUserIdSetInt32">
            <summary>Sets the shim of MyEventsToken.set_RegisteredUserId(Int32 value)</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.ShimMyEventsToken.StaticConstructor">
            <summary>Sets the shim of MyEventsToken.MyEventsToken()</summary>
        </member>
        <member name="T:MyEvents.Api.Authentication.Fakes.ShimMyEventsToken.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.ShimMyEventsToken.AllInstances.IsExpired">
            <summary>Sets the shim of MyEventsToken.IsExpired()</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.ShimMyEventsToken.AllInstances.RegisteredUserIdGet">
            <summary>Sets the shim of MyEventsToken.get_RegisteredUserId()</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.ShimMyEventsToken.AllInstances.RegisteredUserIdSetInt32">
            <summary>Sets the shim of MyEventsToken.set_RegisteredUserId(Int32 value)</summary>
        </member>
        <member name="T:MyEvents.Api.Authentication.Fakes.ShimOnlyHttpsAttribute">
            <summary>Shim type of MyEvents.Api.Authentication.OnlyHttpsAttribute</summary>
        </member>
        <member name="M:MyEvents.Api.Authentication.Fakes.ShimOnlyHttpsAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:MyEvents.Api.Authentication.Fakes.ShimOnlyHttpsAttribute.#ctor(MyEvents.Api.Authentication.OnlyHttpsAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:MyEvents.Api.Authentication.Fakes.ShimOnlyHttpsAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MyEvents.Api.Authentication.Fakes.ShimOnlyHttpsAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MyEvents.Api.Authentication.Fakes.ShimOnlyHttpsAttribute.Bind(System.Web.Http.Filters.IActionFilter)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:MyEvents.Api.Authentication.Fakes.ShimOnlyHttpsAttribute.Bind(System.Web.Http.Filters.IFilter)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.ShimOnlyHttpsAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.ShimOnlyHttpsAttribute.Constructor">
            <summary>Sets the shim of OnlyHttpsAttribute.OnlyHttpsAttribute()</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.ShimOnlyHttpsAttribute.OnActionExecutingHttpActionContext">
            <summary>Sets the shim of OnlyHttpsAttribute.OnActionExecuting(HttpActionContext actionContext)</summary>
        </member>
        <member name="T:MyEvents.Api.Authentication.Fakes.ShimOnlyHttpsAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.ShimOnlyHttpsAttribute.AllInstances.OnActionExecutingHttpActionContext">
            <summary>Sets the shim of OnlyHttpsAttribute.OnActionExecuting(HttpActionContext actionContext)</summary>
        </member>
        <member name="T:MyEvents.Api.Authentication.Fakes.StubAuthenticationResponse">
            <summary>Stub type of MyEvents.Api.Authentication.AuthenticationResponse</summary>
        </member>
        <member name="M:MyEvents.Api.Authentication.Fakes.StubAuthenticationResponse.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:MyEvents.Api.Authentication.Fakes.StubAuthenticationResponse.InitializeStub">
            <summary>Initializes a new instance of type StubAuthenticationResponse</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.StubAuthenticationResponse.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.StubAuthenticationResponse.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.StubAuthenticationResponse.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:MyEvents.Api.Authentication.Fakes.StubAuthorizeAttribute">
            <summary>Stub type of MyEvents.Api.Authentication.AuthorizeAttribute</summary>
        </member>
        <member name="M:MyEvents.Api.Authentication.Fakes.StubAuthorizeAttribute.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:MyEvents.Api.Authentication.Fakes.StubAuthorizeAttribute.Equals(System.Object)">
            <summary>Sets the stub of Attribute.Equals(Object obj)</summary>
        </member>
        <member name="F:MyEvents.Api.Authentication.Fakes.StubAuthorizeAttribute.EqualsObject">
            <summary>Sets the stub of Attribute.Equals(Object obj)</summary>
        </member>
        <member name="M:MyEvents.Api.Authentication.Fakes.StubAuthorizeAttribute.GetHashCode">
            <summary>Sets the stub of Attribute.GetHashCode()</summary>
        </member>
        <member name="F:MyEvents.Api.Authentication.Fakes.StubAuthorizeAttribute.GetHashCode01">
            <summary>Sets the stub of Attribute.GetHashCode()</summary>
        </member>
        <member name="M:MyEvents.Api.Authentication.Fakes.StubAuthorizeAttribute.HandleUnauthorizedRequest(System.Web.Http.Controllers.HttpActionContext)">
            <summary>Sets the stub of AuthorizeAttribute.HandleUnauthorizedRequest(HttpActionContext actionContext)</summary>
        </member>
        <member name="F:MyEvents.Api.Authentication.Fakes.StubAuthorizeAttribute.HandleUnauthorizedRequestHttpActionContext">
            <summary>Sets the stub of AuthorizeAttribute.HandleUnauthorizedRequest(HttpActionContext actionContext)</summary>
        </member>
        <member name="M:MyEvents.Api.Authentication.Fakes.StubAuthorizeAttribute.InitializeStub">
            <summary>Initializes a new instance of type StubAuthorizeAttribute</summary>
        </member>
        <member name="M:MyEvents.Api.Authentication.Fakes.StubAuthorizeAttribute.IsDefaultAttribute">
            <summary>Sets the stub of Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="F:MyEvents.Api.Authentication.Fakes.StubAuthorizeAttribute.IsDefaultAttribute01">
            <summary>Sets the stub of Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="M:MyEvents.Api.Authentication.Fakes.StubAuthorizeAttribute.Match(System.Object)">
            <summary>Sets the stub of Attribute.Match(Object obj)</summary>
        </member>
        <member name="F:MyEvents.Api.Authentication.Fakes.StubAuthorizeAttribute.MatchObject">
            <summary>Sets the stub of Attribute.Match(Object obj)</summary>
        </member>
        <member name="M:MyEvents.Api.Authentication.Fakes.StubAuthorizeAttribute.OnAuthorization(System.Web.Http.Controllers.HttpActionContext)">
            <summary>Sets the stub of AuthorizeAttribute.OnAuthorization(HttpActionContext actionContext)</summary>
        </member>
        <member name="F:MyEvents.Api.Authentication.Fakes.StubAuthorizeAttribute.OnAuthorizationHttpActionContext">
            <summary>Sets the stub of AuthorizeAttribute.OnAuthorization(HttpActionContext actionContext)</summary>
        </member>
        <member name="F:MyEvents.Api.Authentication.Fakes.StubAuthorizeAttribute.TypeIdGet">
            <summary>Sets the stub of AuthorizeAttribute.get_TypeId()</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.StubAuthorizeAttribute.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.StubAuthorizeAttribute.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.StubAuthorizeAttribute.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.StubAuthorizeAttribute.TypeId">
            <summary>Sets the stub of AuthorizeAttribute.get_TypeId()</summary>
        </member>
        <member name="T:MyEvents.Api.Authentication.Fakes.StubFacebookService">
            <summary>Stub type of MyEvents.Api.Authentication.FacebookService</summary>
        </member>
        <member name="M:MyEvents.Api.Authentication.Fakes.StubFacebookService.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:MyEvents.Api.Authentication.Fakes.StubFacebookService.InitializeStub">
            <summary>Initializes a new instance of type StubFacebookService</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.StubFacebookService.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.StubFacebookService.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.StubFacebookService.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:MyEvents.Api.Authentication.Fakes.StubIFacebookService">
            <summary>Stub type of MyEvents.Api.Authentication.IFacebookService</summary>
        </member>
        <member name="M:MyEvents.Api.Authentication.Fakes.StubIFacebookService.#ctor">
            <summary>Initializes a new instance of type StubIFacebookService</summary>
        </member>
        <member name="F:MyEvents.Api.Authentication.Fakes.StubIFacebookService.GetUserInformationString">
            <summary>Sets the stub of IFacebookService.GetUserInformation(String token)</summary>
        </member>
        <member name="M:MyEvents.Api.Authentication.Fakes.StubIFacebookService.mea::MyEvents#Api#Authentication#IFacebookService#GetUserInformation(System.String)">
            <summary>Sets the stub of IFacebookService.GetUserInformation(String token)</summary>
        </member>
        <member name="T:MyEvents.Api.Authentication.Fakes.StubMyEventsToken">
            <summary>Stub type of MyEvents.Api.Authentication.MyEventsToken</summary>
        </member>
        <member name="M:MyEvents.Api.Authentication.Fakes.StubMyEventsToken.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:MyEvents.Api.Authentication.Fakes.StubMyEventsToken.InitializeStub">
            <summary>Initializes a new instance of type StubMyEventsToken</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.StubMyEventsToken.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.StubMyEventsToken.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.StubMyEventsToken.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:MyEvents.Api.Authentication.Fakes.StubOnlyHttpsAttribute">
            <summary>Stub type of MyEvents.Api.Authentication.OnlyHttpsAttribute</summary>
        </member>
        <member name="M:MyEvents.Api.Authentication.Fakes.StubOnlyHttpsAttribute.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:MyEvents.Api.Authentication.Fakes.StubOnlyHttpsAttribute.Equals(System.Object)">
            <summary>Sets the stub of Attribute.Equals(Object obj)</summary>
        </member>
        <member name="F:MyEvents.Api.Authentication.Fakes.StubOnlyHttpsAttribute.EqualsObject">
            <summary>Sets the stub of Attribute.Equals(Object obj)</summary>
        </member>
        <member name="M:MyEvents.Api.Authentication.Fakes.StubOnlyHttpsAttribute.GetHashCode">
            <summary>Sets the stub of Attribute.GetHashCode()</summary>
        </member>
        <member name="F:MyEvents.Api.Authentication.Fakes.StubOnlyHttpsAttribute.GetHashCode01">
            <summary>Sets the stub of Attribute.GetHashCode()</summary>
        </member>
        <member name="M:MyEvents.Api.Authentication.Fakes.StubOnlyHttpsAttribute.InitializeStub">
            <summary>Initializes a new instance of type StubOnlyHttpsAttribute</summary>
        </member>
        <member name="M:MyEvents.Api.Authentication.Fakes.StubOnlyHttpsAttribute.IsDefaultAttribute">
            <summary>Sets the stub of Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="F:MyEvents.Api.Authentication.Fakes.StubOnlyHttpsAttribute.IsDefaultAttribute01">
            <summary>Sets the stub of Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="M:MyEvents.Api.Authentication.Fakes.StubOnlyHttpsAttribute.Match(System.Object)">
            <summary>Sets the stub of Attribute.Match(Object obj)</summary>
        </member>
        <member name="F:MyEvents.Api.Authentication.Fakes.StubOnlyHttpsAttribute.MatchObject">
            <summary>Sets the stub of Attribute.Match(Object obj)</summary>
        </member>
        <member name="M:MyEvents.Api.Authentication.Fakes.StubOnlyHttpsAttribute.OnActionExecuted(System.Web.Http.Filters.HttpActionExecutedContext)">
            <summary>Sets the stub of ActionFilterAttribute.OnActionExecuted(HttpActionExecutedContext actionExecutedContext)</summary>
        </member>
        <member name="F:MyEvents.Api.Authentication.Fakes.StubOnlyHttpsAttribute.OnActionExecutedHttpActionExecutedContext">
            <summary>Sets the stub of ActionFilterAttribute.OnActionExecuted(HttpActionExecutedContext actionExecutedContext)</summary>
        </member>
        <member name="M:MyEvents.Api.Authentication.Fakes.StubOnlyHttpsAttribute.OnActionExecuting(System.Web.Http.Controllers.HttpActionContext)">
            <summary>Sets the stub of OnlyHttpsAttribute.OnActionExecuting(HttpActionContext actionContext)</summary>
        </member>
        <member name="F:MyEvents.Api.Authentication.Fakes.StubOnlyHttpsAttribute.OnActionExecutingHttpActionContext">
            <summary>Sets the stub of OnlyHttpsAttribute.OnActionExecuting(HttpActionContext actionContext)</summary>
        </member>
        <member name="F:MyEvents.Api.Authentication.Fakes.StubOnlyHttpsAttribute.TypeIdGet">
            <summary>Sets the stub of Attribute.get_TypeId()</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.StubOnlyHttpsAttribute.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.StubOnlyHttpsAttribute.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.StubOnlyHttpsAttribute.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:MyEvents.Api.Authentication.Fakes.StubOnlyHttpsAttribute.TypeId">
            <summary>Sets the stub of Attribute.get_TypeId()</summary>
        </member>
        <member name="T:MyEvents.Api.Controllers.Fakes.ShimApiExplorerController">
            <summary>Shim type of MyEvents.Api.Controllers.ApiExplorerController</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimApiExplorerController.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimApiExplorerController.#ctor(MyEvents.Api.Controllers.ApiExplorerController)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimApiExplorerController.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimApiExplorerController.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimApiExplorerController.Bind(System.Web.Mvc.IActionFilter)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimApiExplorerController.Bind(System.Web.Mvc.IAuthorizationFilter)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimApiExplorerController.Bind(System.Web.Mvc.IController)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimApiExplorerController.Bind(System.Web.Mvc.IExceptionFilter)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimApiExplorerController.Bind(System.Web.Mvc.IResultFilter)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimApiExplorerController.Bind(System.Web.Mvc.Async.IAsyncController)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimApiExplorerController.Bind(System.Web.Mvc.Async.IAsyncManagerContainer)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimApiExplorerController.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimApiExplorerController.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimApiExplorerController.Constructor">
            <summary>Sets the shim of ApiExplorerController.ApiExplorerController()</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimApiExplorerController.Index">
            <summary>Sets the shim of ApiExplorerController.Index()</summary>
        </member>
        <member name="T:MyEvents.Api.Controllers.Fakes.ShimApiExplorerController.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimApiExplorerController.AllInstances.Index">
            <summary>Sets the shim of ApiExplorerController.Index()</summary>
        </member>
        <member name="T:MyEvents.Api.Controllers.Fakes.ShimAuthenticationController">
            <summary>Shim type of MyEvents.Api.Controllers.AuthenticationController</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimAuthenticationController.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimAuthenticationController.#ctor(MyEvents.Api.Controllers.AuthenticationController)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimAuthenticationController.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimAuthenticationController.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimAuthenticationController.Bind(System.Web.Http.Controllers.IHttpController)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimAuthenticationController.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimAuthenticationController.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimAuthenticationController.ConstructorIRegisteredUserRepositoryIFacebookService">
            <summary>Sets the shim of AuthenticationController.AuthenticationController(IRegisteredUserRepository registeredUserRepository, IFacebookService facebookService)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimAuthenticationController.GetFakeAuthorization">
            <summary>Sets the shim of AuthenticationController.GetFakeAuthorization()</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimAuthenticationController.LogOnString">
            <summary>Sets the shim of AuthenticationController.LogOn(String token)</summary>
        </member>
        <member name="T:MyEvents.Api.Controllers.Fakes.ShimAuthenticationController.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimAuthenticationController.AllInstances.GetFakeAuthorization">
            <summary>Sets the shim of AuthenticationController.GetFakeAuthorization()</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimAuthenticationController.AllInstances.LogOnString">
            <summary>Sets the shim of AuthenticationController.LogOn(String token)</summary>
        </member>
        <member name="T:MyEvents.Api.Controllers.Fakes.ShimCommentsController">
            <summary>Shim type of MyEvents.Api.Controllers.CommentsController</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimCommentsController.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimCommentsController.#ctor(MyEvents.Api.Controllers.CommentsController)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimCommentsController.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimCommentsController.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimCommentsController.Bind(System.Web.Http.Controllers.IHttpController)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimCommentsController.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimCommentsController.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimCommentsController.ConstructorICommentRepositoryISessionRepository">
            <summary>Sets the shim of CommentsController.CommentsController(ICommentRepository commentRepository, ISessionRepository sessionRepository)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimCommentsController.DeleteInt32">
            <summary>Sets the shim of CommentsController.Delete(Int32 id)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimCommentsController.GetInt32">
            <summary>Sets the shim of CommentsController.Get(Int32 id)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimCommentsController.PostComment">
            <summary>Sets the shim of CommentsController.Post(Comment comment)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimCommentsController.ValidateCommentAuthorizationInt32">
            <summary>Sets the shim of CommentsController.ValidateCommentAuthorization(Int32 commentId)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimCommentsController.ValidateSessionAuthorizationInt32">
            <summary>Sets the shim of CommentsController.ValidateSessionAuthorization(Int32 sessionId)</summary>
        </member>
        <member name="T:MyEvents.Api.Controllers.Fakes.ShimCommentsController.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimCommentsController.AllInstances.DeleteInt32">
            <summary>Sets the shim of CommentsController.Delete(Int32 id)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimCommentsController.AllInstances.GetInt32">
            <summary>Sets the shim of CommentsController.Get(Int32 id)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimCommentsController.AllInstances.PostComment">
            <summary>Sets the shim of CommentsController.Post(Comment comment)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimCommentsController.AllInstances.ValidateCommentAuthorizationInt32">
            <summary>Sets the shim of CommentsController.ValidateCommentAuthorization(Int32 commentId)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimCommentsController.AllInstances.ValidateSessionAuthorizationInt32">
            <summary>Sets the shim of CommentsController.ValidateSessionAuthorization(Int32 sessionId)</summary>
        </member>
        <member name="T:MyEvents.Api.Controllers.Fakes.ShimEventDefinitionsController">
            <summary>Shim type of MyEvents.Api.Controllers.EventDefinitionsController</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimEventDefinitionsController.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimEventDefinitionsController.#ctor(MyEvents.Api.Controllers.EventDefinitionsController)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimEventDefinitionsController.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimEventDefinitionsController.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimEventDefinitionsController.Bind(System.Web.Http.Controllers.IHttpController)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimEventDefinitionsController.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimEventDefinitionsController.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimEventDefinitionsController.ConstructorIEventDefinitionRepository">
            <summary>Sets the shim of EventDefinitionsController.EventDefinitionsController(IEventDefinitionRepository eventDefinitionRepository)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimEventDefinitionsController.DeleteInt32">
            <summary>Sets the shim of EventDefinitionsController.Delete(Int32 id)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimEventDefinitionsController.GetAllEventDefinitionsInt32Int32">
            <summary>Sets the shim of EventDefinitionsController.GetAllEventDefinitions(Int32 pageSize, Int32 pageIndex)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimEventDefinitionsController.GetCurrentEventDefinitions">
            <summary>Sets the shim of EventDefinitionsController.GetCurrentEventDefinitions()</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimEventDefinitionsController.GetEventDefinitionByIdInt32">
            <summary>Sets the shim of EventDefinitionsController.GetEventDefinitionById(Int32 id)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimEventDefinitionsController.GetEventDefinitionByOrganizerIdInt32StringInt32Int32">
            <summary>Sets the shim of EventDefinitionsController.GetEventDefinitionByOrganizerId(Int32 organizerId, String filter, Int32 pageSize, Int32 pageIndex)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimEventDefinitionsController.GetEventDefinitionCount">
            <summary>Sets the shim of EventDefinitionsController.GetEventDefinitionCount()</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimEventDefinitionsController.GetEventDefinitionCountByOrganizerIdInt32String">
            <summary>Sets the shim of EventDefinitionsController.GetEventDefinitionCountByOrganizerId(Int32 organizerId, String filter)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimEventDefinitionsController.GetLastEventDefinitionsInt32">
            <summary>Sets the shim of EventDefinitionsController.GetLastEventDefinitions(Int32 number)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimEventDefinitionsController.GetRegisteredUserId">
            <summary>Sets the shim of EventDefinitionsController.GetRegisteredUserId()</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimEventDefinitionsController.GetScheduleInformationInt32">
            <summary>Sets the shim of EventDefinitionsController.GetScheduleInformation(Int32 eventDefinitionId)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimEventDefinitionsController.PostEventDefinition">
            <summary>Sets the shim of EventDefinitionsController.Post(EventDefinition eventDefinition)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimEventDefinitionsController.PutEventDefinition">
            <summary>Sets the shim of EventDefinitionsController.Put(EventDefinition eventDefinition)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimEventDefinitionsController.ValidateEventAuthorizationInt32">
            <summary>Sets the shim of EventDefinitionsController.ValidateEventAuthorization(Int32 eventDefinitionid)</summary>
        </member>
        <member name="T:MyEvents.Api.Controllers.Fakes.ShimEventDefinitionsController.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimEventDefinitionsController.AllInstances.DeleteInt32">
            <summary>Sets the shim of EventDefinitionsController.Delete(Int32 id)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimEventDefinitionsController.AllInstances.GetAllEventDefinitionsInt32Int32">
            <summary>Sets the shim of EventDefinitionsController.GetAllEventDefinitions(Int32 pageSize, Int32 pageIndex)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimEventDefinitionsController.AllInstances.GetCurrentEventDefinitions">
            <summary>Sets the shim of EventDefinitionsController.GetCurrentEventDefinitions()</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimEventDefinitionsController.AllInstances.GetEventDefinitionByIdInt32">
            <summary>Sets the shim of EventDefinitionsController.GetEventDefinitionById(Int32 id)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimEventDefinitionsController.AllInstances.GetEventDefinitionByOrganizerIdInt32StringInt32Int32">
            <summary>Sets the shim of EventDefinitionsController.GetEventDefinitionByOrganizerId(Int32 organizerId, String filter, Int32 pageSize, Int32 pageIndex)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimEventDefinitionsController.AllInstances.GetEventDefinitionCount">
            <summary>Sets the shim of EventDefinitionsController.GetEventDefinitionCount()</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimEventDefinitionsController.AllInstances.GetEventDefinitionCountByOrganizerIdInt32String">
            <summary>Sets the shim of EventDefinitionsController.GetEventDefinitionCountByOrganizerId(Int32 organizerId, String filter)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimEventDefinitionsController.AllInstances.GetLastEventDefinitionsInt32">
            <summary>Sets the shim of EventDefinitionsController.GetLastEventDefinitions(Int32 number)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimEventDefinitionsController.AllInstances.GetRegisteredUserId">
            <summary>Sets the shim of EventDefinitionsController.GetRegisteredUserId()</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimEventDefinitionsController.AllInstances.GetScheduleInformationInt32">
            <summary>Sets the shim of EventDefinitionsController.GetScheduleInformation(Int32 eventDefinitionId)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimEventDefinitionsController.AllInstances.PostEventDefinition">
            <summary>Sets the shim of EventDefinitionsController.Post(EventDefinition eventDefinition)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimEventDefinitionsController.AllInstances.PutEventDefinition">
            <summary>Sets the shim of EventDefinitionsController.Put(EventDefinition eventDefinition)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimEventDefinitionsController.AllInstances.ValidateEventAuthorizationInt32">
            <summary>Sets the shim of EventDefinitionsController.ValidateEventAuthorization(Int32 eventDefinitionid)</summary>
        </member>
        <member name="T:MyEvents.Api.Controllers.Fakes.ShimMaterialsController">
            <summary>Shim type of MyEvents.Api.Controllers.MaterialsController</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimMaterialsController.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimMaterialsController.#ctor(MyEvents.Api.Controllers.MaterialsController)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimMaterialsController.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimMaterialsController.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimMaterialsController.Bind(System.Web.Http.Controllers.IHttpController)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimMaterialsController.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimMaterialsController.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimMaterialsController.ConstructorIMaterialRepositoryISessionRepository">
            <summary>Sets the shim of MaterialsController.MaterialsController(IMaterialRepository materialRepository, ISessionRepository sessionRepository)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimMaterialsController.DeleteInt32">
            <summary>Sets the shim of MaterialsController.Delete(Int32 id)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimMaterialsController.GetAllMaterialsInt32">
            <summary>Sets the shim of MaterialsController.GetAllMaterials(Int32 sessionId)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimMaterialsController.GetInt32">
            <summary>Sets the shim of MaterialsController.Get(Int32 id)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimMaterialsController.PostMaterial">
            <summary>Sets the shim of MaterialsController.Post(Material material)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimMaterialsController.ValidateMaterialAuthorizationInt32">
            <summary>Sets the shim of MaterialsController.ValidateMaterialAuthorization(Int32 materialId)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimMaterialsController.ValidateSessionAuthorizationInt32">
            <summary>Sets the shim of MaterialsController.ValidateSessionAuthorization(Int32 sessionId)</summary>
        </member>
        <member name="T:MyEvents.Api.Controllers.Fakes.ShimMaterialsController.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimMaterialsController.AllInstances.DeleteInt32">
            <summary>Sets the shim of MaterialsController.Delete(Int32 id)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimMaterialsController.AllInstances.GetAllMaterialsInt32">
            <summary>Sets the shim of MaterialsController.GetAllMaterials(Int32 sessionId)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimMaterialsController.AllInstances.GetInt32">
            <summary>Sets the shim of MaterialsController.Get(Int32 id)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimMaterialsController.AllInstances.PostMaterial">
            <summary>Sets the shim of MaterialsController.Post(Material material)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimMaterialsController.AllInstances.ValidateMaterialAuthorizationInt32">
            <summary>Sets the shim of MaterialsController.ValidateMaterialAuthorization(Int32 materialId)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimMaterialsController.AllInstances.ValidateSessionAuthorizationInt32">
            <summary>Sets the shim of MaterialsController.ValidateSessionAuthorization(Int32 sessionId)</summary>
        </member>
        <member name="T:MyEvents.Api.Controllers.Fakes.ShimRegisteredUsersController">
            <summary>Shim type of MyEvents.Api.Controllers.RegisteredUsersController</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimRegisteredUsersController.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimRegisteredUsersController.#ctor(MyEvents.Api.Controllers.RegisteredUsersController)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimRegisteredUsersController.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimRegisteredUsersController.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimRegisteredUsersController.Bind(System.Web.Http.Controllers.IHttpController)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimRegisteredUsersController.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimRegisteredUsersController.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimRegisteredUsersController.ConstructorIRegisteredUserRepository">
            <summary>Sets the shim of RegisteredUsersController.RegisteredUsersController(IRegisteredUserRepository registeredUserRepository)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimRegisteredUsersController.DeleteRegisteredUserFromEventInt32Int32">
            <summary>Sets the shim of RegisteredUsersController.DeleteRegisteredUserFromEvent(Int32 registeredUserId, Int32 eventDefinitionId)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimRegisteredUsersController.DeleteRegisteredUserFromSessionInt32Int32">
            <summary>Sets the shim of RegisteredUsersController.DeleteRegisteredUserFromSession(Int32 registeredUserId, Int32 sessionId)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimRegisteredUsersController.GetAllRegisteredUsersByEventIdInt32">
            <summary>Sets the shim of RegisteredUsersController.GetAllRegisteredUsersByEventId(Int32 eventDefinitionId)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimRegisteredUsersController.GetAllRegisteredUsersBySessionIdInt32">
            <summary>Sets the shim of RegisteredUsersController.GetAllRegisteredUsersBySessionId(Int32 sessionId)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimRegisteredUsersController.GetFakeRegisteredUser">
            <summary>Sets the shim of RegisteredUsersController.GetFakeRegisteredUser()</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimRegisteredUsersController.GetRegisteredUserEventDefinitionsInt32">
            <summary>Sets the shim of RegisteredUsersController.GetRegisteredUserEventDefinitions(Int32 registeredUserId)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimRegisteredUsersController.GetRegisteredUserString">
            <summary>Sets the shim of RegisteredUsersController.GetRegisteredUser(String facebookId)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimRegisteredUsersController.PostRegisteredUserCreateIfNotExistsRegisteredUser">
            <summary>Sets the shim of RegisteredUsersController.PostRegisteredUserCreateIfNotExists(RegisteredUser registeredUser)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimRegisteredUsersController.PostRegisteredUserScoreInt32Int32Double">
            <summary>Sets the shim of RegisteredUsersController.PostRegisteredUserScore(Int32 registeredUserId, Int32 sessionId, Double score)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimRegisteredUsersController.PostRegisteredUserToEventInt32Int32">
            <summary>Sets the shim of RegisteredUsersController.PostRegisteredUserToEvent(Int32 registeredUserId, Int32 eventDefinitionId)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimRegisteredUsersController.PostRegisteredUserToSessionInt32Int32">
            <summary>Sets the shim of RegisteredUsersController.PostRegisteredUserToSession(Int32 registeredUserId, Int32 sessionId)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimRegisteredUsersController.ValidateRegisteredUserIdInt32">
            <summary>Sets the shim of RegisteredUsersController.ValidateRegisteredUserId(Int32 registeredUserId)</summary>
        </member>
        <member name="T:MyEvents.Api.Controllers.Fakes.ShimRegisteredUsersController.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimRegisteredUsersController.AllInstances.DeleteRegisteredUserFromEventInt32Int32">
            <summary>Sets the shim of RegisteredUsersController.DeleteRegisteredUserFromEvent(Int32 registeredUserId, Int32 eventDefinitionId)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimRegisteredUsersController.AllInstances.DeleteRegisteredUserFromSessionInt32Int32">
            <summary>Sets the shim of RegisteredUsersController.DeleteRegisteredUserFromSession(Int32 registeredUserId, Int32 sessionId)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimRegisteredUsersController.AllInstances.GetAllRegisteredUsersByEventIdInt32">
            <summary>Sets the shim of RegisteredUsersController.GetAllRegisteredUsersByEventId(Int32 eventDefinitionId)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimRegisteredUsersController.AllInstances.GetAllRegisteredUsersBySessionIdInt32">
            <summary>Sets the shim of RegisteredUsersController.GetAllRegisteredUsersBySessionId(Int32 sessionId)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimRegisteredUsersController.AllInstances.GetFakeRegisteredUser">
            <summary>Sets the shim of RegisteredUsersController.GetFakeRegisteredUser()</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimRegisteredUsersController.AllInstances.GetRegisteredUserEventDefinitionsInt32">
            <summary>Sets the shim of RegisteredUsersController.GetRegisteredUserEventDefinitions(Int32 registeredUserId)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimRegisteredUsersController.AllInstances.GetRegisteredUserString">
            <summary>Sets the shim of RegisteredUsersController.GetRegisteredUser(String facebookId)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimRegisteredUsersController.AllInstances.PostRegisteredUserCreateIfNotExistsRegisteredUser">
            <summary>Sets the shim of RegisteredUsersController.PostRegisteredUserCreateIfNotExists(RegisteredUser registeredUser)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimRegisteredUsersController.AllInstances.PostRegisteredUserScoreInt32Int32Double">
            <summary>Sets the shim of RegisteredUsersController.PostRegisteredUserScore(Int32 registeredUserId, Int32 sessionId, Double score)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimRegisteredUsersController.AllInstances.PostRegisteredUserToEventInt32Int32">
            <summary>Sets the shim of RegisteredUsersController.PostRegisteredUserToEvent(Int32 registeredUserId, Int32 eventDefinitionId)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimRegisteredUsersController.AllInstances.PostRegisteredUserToSessionInt32Int32">
            <summary>Sets the shim of RegisteredUsersController.PostRegisteredUserToSession(Int32 registeredUserId, Int32 sessionId)</summary>
        </member>
        <member name="T:MyEvents.Api.Controllers.Fakes.ShimRoomPointsController">
            <summary>Shim type of MyEvents.Api.Controllers.RoomPointsController</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimRoomPointsController.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimRoomPointsController.#ctor(MyEvents.Api.Controllers.RoomPointsController)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimRoomPointsController.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimRoomPointsController.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimRoomPointsController.Bind(System.Web.Http.Controllers.IHttpController)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimRoomPointsController.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimRoomPointsController.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimRoomPointsController.ConstructorIEventDefinitionRepository">
            <summary>Sets the shim of RoomPointsController.RoomPointsController(IEventDefinitionRepository eventDefinitionRepository)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimRoomPointsController.DeleteRoomPointsInt32Int32">
            <summary>Sets the shim of RoomPointsController.DeleteRoomPoints(Int32 eventDefinitionId, Int32 roomNumber)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimRoomPointsController.GetAllRoomPointsInt32">
            <summary>Sets the shim of RoomPointsController.GetAllRoomPoints(Int32 id)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimRoomPointsController.GetRoomImageInt32">
            <summary>Sets the shim of RoomPointsController.GetRoomImage(Int32 eventDefinitionId)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimRoomPointsController.GetRoomPointsInt32">
            <summary>Sets the shim of RoomPointsController.GetRoomPoints(Int32 sessionId)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimRoomPointsController.PostRoomPointsIEnumerableOfRoomPoint">
            <summary>Sets the shim of RoomPointsController.PostRoomPoints(IEnumerable`1&lt;RoomPoint&gt; roomPoints)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimRoomPointsController.PutRoomImageEventDefinition">
            <summary>Sets the shim of RoomPointsController.PutRoomImage(EventDefinition eventDefinition)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimRoomPointsController.ValidateEventAuthorizationInt32">
            <summary>Sets the shim of RoomPointsController.ValidateEventAuthorization(Int32 eventDefinitionid)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimRoomPointsController._PostRoomPointsb__0RoomPoint">
            <summary>Sets the shim of RoomPointsController.&lt;PostRoomPoints&gt;b__0(RoomPoint r)</summary>
        </member>
        <member name="T:MyEvents.Api.Controllers.Fakes.ShimRoomPointsController.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimRoomPointsController.AllInstances.DeleteRoomPointsInt32Int32">
            <summary>Sets the shim of RoomPointsController.DeleteRoomPoints(Int32 eventDefinitionId, Int32 roomNumber)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimRoomPointsController.AllInstances.GetAllRoomPointsInt32">
            <summary>Sets the shim of RoomPointsController.GetAllRoomPoints(Int32 id)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimRoomPointsController.AllInstances.GetRoomImageInt32">
            <summary>Sets the shim of RoomPointsController.GetRoomImage(Int32 eventDefinitionId)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimRoomPointsController.AllInstances.GetRoomPointsInt32">
            <summary>Sets the shim of RoomPointsController.GetRoomPoints(Int32 sessionId)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimRoomPointsController.AllInstances.PostRoomPointsIEnumerableOfRoomPoint">
            <summary>Sets the shim of RoomPointsController.PostRoomPoints(IEnumerable`1&lt;RoomPoint&gt; roomPoints)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimRoomPointsController.AllInstances.PutRoomImageEventDefinition">
            <summary>Sets the shim of RoomPointsController.PutRoomImage(EventDefinition eventDefinition)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimRoomPointsController.AllInstances.ValidateEventAuthorizationInt32">
            <summary>Sets the shim of RoomPointsController.ValidateEventAuthorization(Int32 eventDefinitionid)</summary>
        </member>
        <member name="T:MyEvents.Api.Controllers.Fakes.ShimSessionsController">
            <summary>Shim type of MyEvents.Api.Controllers.SessionsController</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimSessionsController.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimSessionsController.#ctor(MyEvents.Api.Controllers.SessionsController)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimSessionsController.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimSessionsController.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimSessionsController.Bind(System.Web.Http.Controllers.IHttpController)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimSessionsController.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimSessionsController.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimSessionsController.ConstructorISessionRepositoryIEventDefinitionRepository">
            <summary>Sets the shim of SessionsController.SessionsController(ISessionRepository sessionRepository, IEventDefinitionRepository eventDefinitionRepository)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimSessionsController.DeleteInt32">
            <summary>Sets the shim of SessionsController.Delete(Int32 id)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimSessionsController.GetAllInt32">
            <summary>Sets the shim of SessionsController.GetAll(Int32 eventDefinitionId)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimSessionsController.GetInt32">
            <summary>Sets the shim of SessionsController.Get(Int32 id)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimSessionsController.GetRegisteredUserId">
            <summary>Sets the shim of SessionsController.GetRegisteredUserId()</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimSessionsController.PostSession">
            <summary>Sets the shim of SessionsController.Post(Session session)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimSessionsController.PutSession">
            <summary>Sets the shim of SessionsController.Put(Session session)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimSessionsController.PutSessionPeriodInt32StringInt32">
            <summary>Sets the shim of SessionsController.PutSessionPeriod(Int32 sessionId, String startTime, Int32 duration)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimSessionsController.ValidateEventAuthorizationInt32">
            <summary>Sets the shim of SessionsController.ValidateEventAuthorization(Int32 eventDefinitionid)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimSessionsController.ValidateSessionAuthorizationInt32">
            <summary>Sets the shim of SessionsController.ValidateSessionAuthorization(Int32 sessionId)</summary>
        </member>
        <member name="T:MyEvents.Api.Controllers.Fakes.ShimSessionsController.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimSessionsController.AllInstances.DeleteInt32">
            <summary>Sets the shim of SessionsController.Delete(Int32 id)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimSessionsController.AllInstances.GetAllInt32">
            <summary>Sets the shim of SessionsController.GetAll(Int32 eventDefinitionId)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimSessionsController.AllInstances.GetInt32">
            <summary>Sets the shim of SessionsController.Get(Int32 id)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimSessionsController.AllInstances.GetRegisteredUserId">
            <summary>Sets the shim of SessionsController.GetRegisteredUserId()</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimSessionsController.AllInstances.PostSession">
            <summary>Sets the shim of SessionsController.Post(Session session)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimSessionsController.AllInstances.PutSession">
            <summary>Sets the shim of SessionsController.Put(Session session)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimSessionsController.AllInstances.PutSessionPeriodInt32StringInt32">
            <summary>Sets the shim of SessionsController.PutSessionPeriod(Int32 sessionId, String startTime, Int32 duration)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimSessionsController.AllInstances.ValidateEventAuthorizationInt32">
            <summary>Sets the shim of SessionsController.ValidateEventAuthorization(Int32 eventDefinitionid)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimSessionsController.AllInstances.ValidateSessionAuthorizationInt32">
            <summary>Sets the shim of SessionsController.ValidateSessionAuthorization(Int32 sessionId)</summary>
        </member>
        <member name="T:MyEvents.Api.Controllers.Fakes.ShimSpeakersController">
            <summary>Shim type of MyEvents.Api.Controllers.SpeakersController</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimSpeakersController.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimSpeakersController.#ctor(MyEvents.Api.Controllers.SpeakersController)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimSpeakersController.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimSpeakersController.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimSpeakersController.Bind(System.Web.Http.Controllers.IHttpController)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimSpeakersController.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimSpeakersController.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimSpeakersController.ConstructorIEventDefinitionRepository">
            <summary>Sets the shim of SpeakersController.SpeakersController(IEventDefinitionRepository eventDefinitionRepository)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimSpeakersController.GetTopSpeakersInt32">
            <summary>Sets the shim of SpeakersController.GetTopSpeakers(Int32 id)</summary>
        </member>
        <member name="T:MyEvents.Api.Controllers.Fakes.ShimSpeakersController.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimSpeakersController.AllInstances.GetTopSpeakersInt32">
            <summary>Sets the shim of SpeakersController.GetTopSpeakers(Int32 id)</summary>
        </member>
        <member name="T:MyEvents.Api.Controllers.Fakes.ShimTagsController">
            <summary>Shim type of MyEvents.Api.Controllers.TagsController</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimTagsController.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimTagsController.#ctor(MyEvents.Api.Controllers.TagsController)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimTagsController.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimTagsController.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimTagsController.Bind(System.Web.Http.Controllers.IHttpController)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.ShimTagsController.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimTagsController.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimTagsController.ConstructorIEventDefinitionRepository">
            <summary>Sets the shim of TagsController.TagsController(IEventDefinitionRepository eventDefinitionRepository)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimTagsController.GetTopTagsInt32">
            <summary>Sets the shim of TagsController.GetTopTags(Int32 id)</summary>
        </member>
        <member name="T:MyEvents.Api.Controllers.Fakes.ShimTagsController.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.ShimTagsController.AllInstances.GetTopTagsInt32">
            <summary>Sets the shim of TagsController.GetTopTags(Int32 id)</summary>
        </member>
        <member name="T:MyEvents.Api.Controllers.Fakes.StubApiExplorerController">
            <summary>Stub type of MyEvents.Api.Controllers.ApiExplorerController</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.BeginExecute(System.Web.Routing.RequestContext,System.AsyncCallback,System.Object)">
            <summary>Sets the stub of Controller.BeginExecute(RequestContext requestContext, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.BeginExecuteCore(System.AsyncCallback,System.Object)">
            <summary>Sets the stub of Controller.BeginExecuteCore(AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.BeginExecuteCoreAsyncCallbackObject">
            <summary>Sets the stub of Controller.BeginExecuteCore(AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.BeginExecuteRequestContextAsyncCallbackObject">
            <summary>Sets the stub of Controller.BeginExecute(RequestContext requestContext, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.Content(System.String,System.String,System.Text.Encoding)">
            <summary>Sets the stub of Controller.Content(String content, String contentType, Encoding contentEncoding)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.ContentStringStringEncoding">
            <summary>Sets the stub of Controller.Content(String content, String contentType, Encoding contentEncoding)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.CreateActionInvoker">
            <summary>Sets the stub of Controller.CreateActionInvoker()</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.CreateActionInvoker01">
            <summary>Sets the stub of Controller.CreateActionInvoker()</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.CreateTempDataProvider">
            <summary>Sets the stub of Controller.CreateTempDataProvider()</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.CreateTempDataProvider01">
            <summary>Sets the stub of Controller.CreateTempDataProvider()</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.DisableAsyncSupportGet">
            <summary>Sets the stub of Controller.get_DisableAsyncSupport()</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.Dispose(System.Boolean)">
            <summary>Sets the stub of Controller.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.DisposeBoolean">
            <summary>Sets the stub of Controller.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.EndExecute(System.IAsyncResult)">
            <summary>Sets the stub of Controller.EndExecute(IAsyncResult asyncResult)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.EndExecuteCore(System.IAsyncResult)">
            <summary>Sets the stub of Controller.EndExecuteCore(IAsyncResult asyncResult)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.EndExecuteCoreIAsyncResult">
            <summary>Sets the stub of Controller.EndExecuteCore(IAsyncResult asyncResult)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.EndExecuteIAsyncResult">
            <summary>Sets the stub of Controller.EndExecute(IAsyncResult asyncResult)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.Execute(System.Web.Routing.RequestContext)">
            <summary>Sets the stub of ControllerBase.Execute(RequestContext requestContext)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.ExecuteCore">
            <summary>Sets the stub of Controller.ExecuteCore()</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.ExecuteCore01">
            <summary>Sets the stub of Controller.ExecuteCore()</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.ExecuteRequestContext">
            <summary>Sets the stub of ControllerBase.Execute(RequestContext requestContext)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.File(System.Byte[],System.String,System.String)">
            <summary>Sets the stub of Controller.File(Byte[] fileContents, String contentType, String fileDownloadName)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.File(System.String,System.String,System.String)">
            <summary>Sets the stub of Controller.File(String fileName, String contentType, String fileDownloadName)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.File(System.IO.Stream,System.String,System.String)">
            <summary>Sets the stub of Controller.File(Stream fileStream, String contentType, String fileDownloadName)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.FileByteArrayStringString">
            <summary>Sets the stub of Controller.File(Byte[] fileContents, String contentType, String fileDownloadName)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.FileStreamStringString">
            <summary>Sets the stub of Controller.File(Stream fileStream, String contentType, String fileDownloadName)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.FileStringStringString">
            <summary>Sets the stub of Controller.File(String fileName, String contentType, String fileDownloadName)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.HandleUnknownAction(System.String)">
            <summary>Sets the stub of Controller.HandleUnknownAction(String actionName)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.HandleUnknownActionString">
            <summary>Sets the stub of Controller.HandleUnknownAction(String actionName)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.HttpNotFound(System.String)">
            <summary>Sets the stub of Controller.HttpNotFound(String statusDescription)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.HttpNotFoundString">
            <summary>Sets the stub of Controller.HttpNotFound(String statusDescription)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.Initialize(System.Web.Routing.RequestContext)">
            <summary>Sets the stub of Controller.Initialize(RequestContext requestContext)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.InitializeRequestContext">
            <summary>Sets the stub of Controller.Initialize(RequestContext requestContext)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.InitializeStub">
            <summary>Initializes a new instance of type StubApiExplorerController</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.JavaScript(System.String)">
            <summary>Sets the stub of Controller.JavaScript(String script)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.JavaScriptString">
            <summary>Sets the stub of Controller.JavaScript(String script)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.Json(System.Object,System.String,System.Text.Encoding)">
            <summary>Sets the stub of Controller.Json(Object data, String contentType, Encoding contentEncoding)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.Json(System.Object,System.String,System.Text.Encoding,System.Web.Mvc.JsonRequestBehavior)">
            <summary>Sets the stub of Controller.Json(Object data, String contentType, Encoding contentEncoding, JsonRequestBehavior behavior)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.JsonObjectStringEncoding">
            <summary>Sets the stub of Controller.Json(Object data, String contentType, Encoding contentEncoding)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.JsonObjectStringEncodingJsonRequestBehavior">
            <summary>Sets the stub of Controller.Json(Object data, String contentType, Encoding contentEncoding, JsonRequestBehavior behavior)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)">
            <summary>Sets the stub of Controller.OnActionExecuted(ActionExecutedContext filterContext)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.OnActionExecutedActionExecutedContext">
            <summary>Sets the stub of Controller.OnActionExecuted(ActionExecutedContext filterContext)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
            <summary>Sets the stub of Controller.OnActionExecuting(ActionExecutingContext filterContext)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.OnActionExecutingActionExecutingContext">
            <summary>Sets the stub of Controller.OnActionExecuting(ActionExecutingContext filterContext)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.OnAuthorization(System.Web.Mvc.AuthorizationContext)">
            <summary>Sets the stub of Controller.OnAuthorization(AuthorizationContext filterContext)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.OnAuthorizationAuthorizationContext">
            <summary>Sets the stub of Controller.OnAuthorization(AuthorizationContext filterContext)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.OnException(System.Web.Mvc.ExceptionContext)">
            <summary>Sets the stub of Controller.OnException(ExceptionContext filterContext)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.OnExceptionExceptionContext">
            <summary>Sets the stub of Controller.OnException(ExceptionContext filterContext)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.OnResultExecuted(System.Web.Mvc.ResultExecutedContext)">
            <summary>Sets the stub of Controller.OnResultExecuted(ResultExecutedContext filterContext)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.OnResultExecutedResultExecutedContext">
            <summary>Sets the stub of Controller.OnResultExecuted(ResultExecutedContext filterContext)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.OnResultExecuting(System.Web.Mvc.ResultExecutingContext)">
            <summary>Sets the stub of Controller.OnResultExecuting(ResultExecutingContext filterContext)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.OnResultExecutingResultExecutingContext">
            <summary>Sets the stub of Controller.OnResultExecuting(ResultExecutingContext filterContext)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.PartialView(System.String,System.Object)">
            <summary>Sets the stub of Controller.PartialView(String viewName, Object model)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.PartialViewStringObject">
            <summary>Sets the stub of Controller.PartialView(String viewName, Object model)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.Redirect(System.String)">
            <summary>Sets the stub of Controller.Redirect(String url)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.RedirectPermanent(System.String)">
            <summary>Sets the stub of Controller.RedirectPermanent(String url)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.RedirectPermanentString">
            <summary>Sets the stub of Controller.RedirectPermanent(String url)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.RedirectString">
            <summary>Sets the stub of Controller.Redirect(String url)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.RedirectToAction(System.String,System.String,System.Web.Routing.RouteValueDictionary)">
            <summary>Sets the stub of Controller.RedirectToAction(String actionName, String controllerName, RouteValueDictionary routeValues)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.RedirectToActionPermanent(System.String,System.String,System.Web.Routing.RouteValueDictionary)">
            <summary>Sets the stub of Controller.RedirectToActionPermanent(String actionName, String controllerName, RouteValueDictionary routeValues)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.RedirectToActionPermanentStringStringRouteValueDictionary">
            <summary>Sets the stub of Controller.RedirectToActionPermanent(String actionName, String controllerName, RouteValueDictionary routeValues)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.RedirectToActionStringStringRouteValueDictionary">
            <summary>Sets the stub of Controller.RedirectToAction(String actionName, String controllerName, RouteValueDictionary routeValues)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.RedirectToRoute(System.String,System.Web.Routing.RouteValueDictionary)">
            <summary>Sets the stub of Controller.RedirectToRoute(String routeName, RouteValueDictionary routeValues)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.RedirectToRoutePermanent(System.String,System.Web.Routing.RouteValueDictionary)">
            <summary>Sets the stub of Controller.RedirectToRoutePermanent(String routeName, RouteValueDictionary routeValues)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.RedirectToRoutePermanentStringRouteValueDictionary">
            <summary>Sets the stub of Controller.RedirectToRoutePermanent(String routeName, RouteValueDictionary routeValues)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.RedirectToRouteStringRouteValueDictionary">
            <summary>Sets the stub of Controller.RedirectToRoute(String routeName, RouteValueDictionary routeValues)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.View(System.Web.Mvc.IView,System.Object)">
            <summary>Sets the stub of Controller.View(IView view, Object model)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.View(System.String,System.String,System.Object)">
            <summary>Sets the stub of Controller.View(String viewName, String masterName, Object model)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.ViewIViewObject">
            <summary>Sets the stub of Controller.View(IView view, Object model)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.ViewStringStringObject">
            <summary>Sets the stub of Controller.View(String viewName, String masterName, Object model)</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.DisableAsyncSupport">
            <summary>Sets the stub of Controller.get_DisableAsyncSupport()</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.StubApiExplorerController.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:MyEvents.Api.Controllers.Fakes.StubAuthenticationController">
            <summary>Stub type of MyEvents.Api.Controllers.AuthenticationController</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubAuthenticationController.#ctor(MyEvents.Data.IRegisteredUserRepository,MyEvents.Api.Authentication.IFacebookService)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubAuthenticationController.Dispose(System.Boolean)">
            <summary>Sets the stub of ApiController.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubAuthenticationController.DisposeBoolean">
            <summary>Sets the stub of ApiController.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubAuthenticationController.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Threading.CancellationToken)">
            <summary>Sets the stub of ApiController.ExecuteAsync(HttpControllerContext controllerContext, CancellationToken cancellationToken)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubAuthenticationController.ExecuteAsyncHttpControllerContextCancellationToken">
            <summary>Sets the stub of ApiController.ExecuteAsync(HttpControllerContext controllerContext, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubAuthenticationController.Initialize(System.Web.Http.Controllers.HttpControllerContext)">
            <summary>Sets the stub of ApiController.Initialize(HttpControllerContext controllerContext)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubAuthenticationController.InitializeHttpControllerContext">
            <summary>Sets the stub of ApiController.Initialize(HttpControllerContext controllerContext)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubAuthenticationController.InitializeStub">
            <summary>Initializes a new instance of type StubAuthenticationController</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.StubAuthenticationController.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.StubAuthenticationController.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.StubAuthenticationController.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:MyEvents.Api.Controllers.Fakes.StubCommentsController">
            <summary>Stub type of MyEvents.Api.Controllers.CommentsController</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubCommentsController.#ctor(MyEvents.Data.ICommentRepository,MyEvents.Data.ISessionRepository)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubCommentsController.Dispose(System.Boolean)">
            <summary>Sets the stub of ApiController.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubCommentsController.DisposeBoolean">
            <summary>Sets the stub of ApiController.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubCommentsController.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Threading.CancellationToken)">
            <summary>Sets the stub of ApiController.ExecuteAsync(HttpControllerContext controllerContext, CancellationToken cancellationToken)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubCommentsController.ExecuteAsyncHttpControllerContextCancellationToken">
            <summary>Sets the stub of ApiController.ExecuteAsync(HttpControllerContext controllerContext, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubCommentsController.Initialize(System.Web.Http.Controllers.HttpControllerContext)">
            <summary>Sets the stub of ApiController.Initialize(HttpControllerContext controllerContext)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubCommentsController.InitializeHttpControllerContext">
            <summary>Sets the stub of ApiController.Initialize(HttpControllerContext controllerContext)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubCommentsController.InitializeStub">
            <summary>Initializes a new instance of type StubCommentsController</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.StubCommentsController.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.StubCommentsController.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.StubCommentsController.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:MyEvents.Api.Controllers.Fakes.StubEventDefinitionsController">
            <summary>Stub type of MyEvents.Api.Controllers.EventDefinitionsController</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubEventDefinitionsController.#ctor(MyEvents.Data.IEventDefinitionRepository)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubEventDefinitionsController.Dispose(System.Boolean)">
            <summary>Sets the stub of ApiController.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubEventDefinitionsController.DisposeBoolean">
            <summary>Sets the stub of ApiController.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubEventDefinitionsController.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Threading.CancellationToken)">
            <summary>Sets the stub of ApiController.ExecuteAsync(HttpControllerContext controllerContext, CancellationToken cancellationToken)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubEventDefinitionsController.ExecuteAsyncHttpControllerContextCancellationToken">
            <summary>Sets the stub of ApiController.ExecuteAsync(HttpControllerContext controllerContext, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubEventDefinitionsController.Initialize(System.Web.Http.Controllers.HttpControllerContext)">
            <summary>Sets the stub of ApiController.Initialize(HttpControllerContext controllerContext)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubEventDefinitionsController.InitializeHttpControllerContext">
            <summary>Sets the stub of ApiController.Initialize(HttpControllerContext controllerContext)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubEventDefinitionsController.InitializeStub">
            <summary>Initializes a new instance of type StubEventDefinitionsController</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.StubEventDefinitionsController.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.StubEventDefinitionsController.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.StubEventDefinitionsController.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:MyEvents.Api.Controllers.Fakes.StubMaterialsController">
            <summary>Stub type of MyEvents.Api.Controllers.MaterialsController</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubMaterialsController.#ctor(MyEvents.Data.IMaterialRepository,MyEvents.Data.ISessionRepository)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubMaterialsController.Dispose(System.Boolean)">
            <summary>Sets the stub of ApiController.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubMaterialsController.DisposeBoolean">
            <summary>Sets the stub of ApiController.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubMaterialsController.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Threading.CancellationToken)">
            <summary>Sets the stub of ApiController.ExecuteAsync(HttpControllerContext controllerContext, CancellationToken cancellationToken)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubMaterialsController.ExecuteAsyncHttpControllerContextCancellationToken">
            <summary>Sets the stub of ApiController.ExecuteAsync(HttpControllerContext controllerContext, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubMaterialsController.Initialize(System.Web.Http.Controllers.HttpControllerContext)">
            <summary>Sets the stub of ApiController.Initialize(HttpControllerContext controllerContext)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubMaterialsController.InitializeHttpControllerContext">
            <summary>Sets the stub of ApiController.Initialize(HttpControllerContext controllerContext)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubMaterialsController.InitializeStub">
            <summary>Initializes a new instance of type StubMaterialsController</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.StubMaterialsController.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.StubMaterialsController.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.StubMaterialsController.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:MyEvents.Api.Controllers.Fakes.StubRegisteredUsersController">
            <summary>Stub type of MyEvents.Api.Controllers.RegisteredUsersController</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubRegisteredUsersController.#ctor(MyEvents.Data.IRegisteredUserRepository)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubRegisteredUsersController.Dispose(System.Boolean)">
            <summary>Sets the stub of ApiController.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubRegisteredUsersController.DisposeBoolean">
            <summary>Sets the stub of ApiController.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubRegisteredUsersController.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Threading.CancellationToken)">
            <summary>Sets the stub of ApiController.ExecuteAsync(HttpControllerContext controllerContext, CancellationToken cancellationToken)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubRegisteredUsersController.ExecuteAsyncHttpControllerContextCancellationToken">
            <summary>Sets the stub of ApiController.ExecuteAsync(HttpControllerContext controllerContext, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubRegisteredUsersController.Initialize(System.Web.Http.Controllers.HttpControllerContext)">
            <summary>Sets the stub of ApiController.Initialize(HttpControllerContext controllerContext)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubRegisteredUsersController.InitializeHttpControllerContext">
            <summary>Sets the stub of ApiController.Initialize(HttpControllerContext controllerContext)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubRegisteredUsersController.InitializeStub">
            <summary>Initializes a new instance of type StubRegisteredUsersController</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.StubRegisteredUsersController.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.StubRegisteredUsersController.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.StubRegisteredUsersController.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:MyEvents.Api.Controllers.Fakes.StubRoomPointsController">
            <summary>Stub type of MyEvents.Api.Controllers.RoomPointsController</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubRoomPointsController.#ctor(MyEvents.Data.IEventDefinitionRepository)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubRoomPointsController.Dispose(System.Boolean)">
            <summary>Sets the stub of ApiController.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubRoomPointsController.DisposeBoolean">
            <summary>Sets the stub of ApiController.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubRoomPointsController.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Threading.CancellationToken)">
            <summary>Sets the stub of ApiController.ExecuteAsync(HttpControllerContext controllerContext, CancellationToken cancellationToken)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubRoomPointsController.ExecuteAsyncHttpControllerContextCancellationToken">
            <summary>Sets the stub of ApiController.ExecuteAsync(HttpControllerContext controllerContext, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubRoomPointsController.Initialize(System.Web.Http.Controllers.HttpControllerContext)">
            <summary>Sets the stub of ApiController.Initialize(HttpControllerContext controllerContext)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubRoomPointsController.InitializeHttpControllerContext">
            <summary>Sets the stub of ApiController.Initialize(HttpControllerContext controllerContext)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubRoomPointsController.InitializeStub">
            <summary>Initializes a new instance of type StubRoomPointsController</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.StubRoomPointsController.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.StubRoomPointsController.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.StubRoomPointsController.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:MyEvents.Api.Controllers.Fakes.StubSessionsController">
            <summary>Stub type of MyEvents.Api.Controllers.SessionsController</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubSessionsController.#ctor(MyEvents.Data.ISessionRepository,MyEvents.Data.IEventDefinitionRepository)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubSessionsController.Dispose(System.Boolean)">
            <summary>Sets the stub of ApiController.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubSessionsController.DisposeBoolean">
            <summary>Sets the stub of ApiController.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubSessionsController.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Threading.CancellationToken)">
            <summary>Sets the stub of ApiController.ExecuteAsync(HttpControllerContext controllerContext, CancellationToken cancellationToken)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubSessionsController.ExecuteAsyncHttpControllerContextCancellationToken">
            <summary>Sets the stub of ApiController.ExecuteAsync(HttpControllerContext controllerContext, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubSessionsController.Initialize(System.Web.Http.Controllers.HttpControllerContext)">
            <summary>Sets the stub of ApiController.Initialize(HttpControllerContext controllerContext)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubSessionsController.InitializeHttpControllerContext">
            <summary>Sets the stub of ApiController.Initialize(HttpControllerContext controllerContext)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubSessionsController.InitializeStub">
            <summary>Initializes a new instance of type StubSessionsController</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.StubSessionsController.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.StubSessionsController.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.StubSessionsController.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:MyEvents.Api.Controllers.Fakes.StubSpeakersController">
            <summary>Stub type of MyEvents.Api.Controllers.SpeakersController</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubSpeakersController.#ctor(MyEvents.Data.IEventDefinitionRepository)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubSpeakersController.Dispose(System.Boolean)">
            <summary>Sets the stub of ApiController.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubSpeakersController.DisposeBoolean">
            <summary>Sets the stub of ApiController.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubSpeakersController.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Threading.CancellationToken)">
            <summary>Sets the stub of ApiController.ExecuteAsync(HttpControllerContext controllerContext, CancellationToken cancellationToken)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubSpeakersController.ExecuteAsyncHttpControllerContextCancellationToken">
            <summary>Sets the stub of ApiController.ExecuteAsync(HttpControllerContext controllerContext, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubSpeakersController.Initialize(System.Web.Http.Controllers.HttpControllerContext)">
            <summary>Sets the stub of ApiController.Initialize(HttpControllerContext controllerContext)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubSpeakersController.InitializeHttpControllerContext">
            <summary>Sets the stub of ApiController.Initialize(HttpControllerContext controllerContext)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubSpeakersController.InitializeStub">
            <summary>Initializes a new instance of type StubSpeakersController</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.StubSpeakersController.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.StubSpeakersController.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.StubSpeakersController.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:MyEvents.Api.Controllers.Fakes.StubTagsController">
            <summary>Stub type of MyEvents.Api.Controllers.TagsController</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubTagsController.#ctor(MyEvents.Data.IEventDefinitionRepository)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubTagsController.Dispose(System.Boolean)">
            <summary>Sets the stub of ApiController.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubTagsController.DisposeBoolean">
            <summary>Sets the stub of ApiController.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubTagsController.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Threading.CancellationToken)">
            <summary>Sets the stub of ApiController.ExecuteAsync(HttpControllerContext controllerContext, CancellationToken cancellationToken)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubTagsController.ExecuteAsyncHttpControllerContextCancellationToken">
            <summary>Sets the stub of ApiController.ExecuteAsync(HttpControllerContext controllerContext, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubTagsController.Initialize(System.Web.Http.Controllers.HttpControllerContext)">
            <summary>Sets the stub of ApiController.Initialize(HttpControllerContext controllerContext)</summary>
        </member>
        <member name="F:MyEvents.Api.Controllers.Fakes.StubTagsController.InitializeHttpControllerContext">
            <summary>Sets the stub of ApiController.Initialize(HttpControllerContext controllerContext)</summary>
        </member>
        <member name="M:MyEvents.Api.Controllers.Fakes.StubTagsController.InitializeStub">
            <summary>Initializes a new instance of type StubTagsController</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.StubTagsController.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.StubTagsController.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:MyEvents.Api.Controllers.Fakes.StubTagsController.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:MyEvents.Api.Documentation.Fakes.ShimXmlCommentDocumentationProvider">
            <summary>Shim type of MyEvents.Api.Documentation.XmlCommentDocumentationProvider</summary>
        </member>
        <member name="M:MyEvents.Api.Documentation.Fakes.ShimXmlCommentDocumentationProvider.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:MyEvents.Api.Documentation.Fakes.ShimXmlCommentDocumentationProvider.#ctor(MyEvents.Api.Documentation.XmlCommentDocumentationProvider)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:MyEvents.Api.Documentation.Fakes.ShimXmlCommentDocumentationProvider.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MyEvents.Api.Documentation.Fakes.ShimXmlCommentDocumentationProvider.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MyEvents.Api.Documentation.Fakes.ShimXmlCommentDocumentationProvider.Bind(System.Web.Http.Description.IDocumentationProvider)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:MyEvents.Api.Documentation.Fakes.ShimXmlCommentDocumentationProvider.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MyEvents.Api.Documentation.Fakes.ShimXmlCommentDocumentationProvider.ConstructorString">
            <summary>Sets the shim of XmlCommentDocumentationProvider.XmlCommentDocumentationProvider(String documentPath)</summary>
        </member>
        <member name="P:MyEvents.Api.Documentation.Fakes.ShimXmlCommentDocumentationProvider.GetDocumentationHttpActionDescriptor">
            <summary>Sets the shim of XmlCommentDocumentationProvider.GetDocumentation(HttpActionDescriptor actionDescriptor)</summary>
        </member>
        <member name="P:MyEvents.Api.Documentation.Fakes.ShimXmlCommentDocumentationProvider.GetDocumentationHttpParameterDescriptor">
            <summary>Sets the shim of XmlCommentDocumentationProvider.GetDocumentation(HttpParameterDescriptor parameterDescriptor)</summary>
        </member>
        <member name="P:MyEvents.Api.Documentation.Fakes.ShimXmlCommentDocumentationProvider.GetMemberNameMethodInfo">
            <summary>Sets the shim of XmlCommentDocumentationProvider.GetMemberName(MethodInfo method)</summary>
        </member>
        <member name="P:MyEvents.Api.Documentation.Fakes.ShimXmlCommentDocumentationProvider.GetMemberNodeHttpActionDescriptor">
            <summary>Sets the shim of XmlCommentDocumentationProvider.GetMemberNode(HttpActionDescriptor actionDescriptor)</summary>
        </member>
        <member name="P:MyEvents.Api.Documentation.Fakes.ShimXmlCommentDocumentationProvider.ProcessTypeNameString">
            <summary>Sets the shim of XmlCommentDocumentationProvider.ProcessTypeName(String typeName)</summary>
        </member>
        <member name="P:MyEvents.Api.Documentation.Fakes.ShimXmlCommentDocumentationProvider.StaticConstructor">
            <summary>Sets the shim of XmlCommentDocumentationProvider.XmlCommentDocumentationProvider()</summary>
        </member>
        <member name="P:MyEvents.Api.Documentation.Fakes.ShimXmlCommentDocumentationProvider._GetMemberNameb__0ParameterInfo">
            <summary>Sets the shim of XmlCommentDocumentationProvider.&lt;GetMemberName&gt;b__0(ParameterInfo param)</summary>
        </member>
        <member name="T:MyEvents.Api.Documentation.Fakes.ShimXmlCommentDocumentationProvider.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:MyEvents.Api.Documentation.Fakes.ShimXmlCommentDocumentationProvider.AllInstances.GetDocumentationHttpActionDescriptor">
            <summary>Sets the shim of XmlCommentDocumentationProvider.GetDocumentation(HttpActionDescriptor actionDescriptor)</summary>
        </member>
        <member name="P:MyEvents.Api.Documentation.Fakes.ShimXmlCommentDocumentationProvider.AllInstances.GetDocumentationHttpParameterDescriptor">
            <summary>Sets the shim of XmlCommentDocumentationProvider.GetDocumentation(HttpParameterDescriptor parameterDescriptor)</summary>
        </member>
        <member name="P:MyEvents.Api.Documentation.Fakes.ShimXmlCommentDocumentationProvider.AllInstances.GetMemberNodeHttpActionDescriptor">
            <summary>Sets the shim of XmlCommentDocumentationProvider.GetMemberNode(HttpActionDescriptor actionDescriptor)</summary>
        </member>
        <member name="T:MyEvents.Api.Documentation.Fakes.StubXmlCommentDocumentationProvider">
            <summary>Stub type of MyEvents.Api.Documentation.XmlCommentDocumentationProvider</summary>
        </member>
        <member name="M:MyEvents.Api.Documentation.Fakes.StubXmlCommentDocumentationProvider.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:MyEvents.Api.Documentation.Fakes.StubXmlCommentDocumentationProvider.GetDocumentation(System.Web.Http.Controllers.HttpActionDescriptor)">
            <summary>Sets the stub of XmlCommentDocumentationProvider.GetDocumentation(HttpActionDescriptor actionDescriptor)</summary>
        </member>
        <member name="M:MyEvents.Api.Documentation.Fakes.StubXmlCommentDocumentationProvider.GetDocumentation(System.Web.Http.Controllers.HttpParameterDescriptor)">
            <summary>Sets the stub of XmlCommentDocumentationProvider.GetDocumentation(HttpParameterDescriptor parameterDescriptor)</summary>
        </member>
        <member name="F:MyEvents.Api.Documentation.Fakes.StubXmlCommentDocumentationProvider.GetDocumentationHttpActionDescriptor">
            <summary>Sets the stub of XmlCommentDocumentationProvider.GetDocumentation(HttpActionDescriptor actionDescriptor)</summary>
        </member>
        <member name="F:MyEvents.Api.Documentation.Fakes.StubXmlCommentDocumentationProvider.GetDocumentationHttpParameterDescriptor">
            <summary>Sets the stub of XmlCommentDocumentationProvider.GetDocumentation(HttpParameterDescriptor parameterDescriptor)</summary>
        </member>
        <member name="M:MyEvents.Api.Documentation.Fakes.StubXmlCommentDocumentationProvider.InitializeStub">
            <summary>Initializes a new instance of type StubXmlCommentDocumentationProvider</summary>
        </member>
        <member name="P:MyEvents.Api.Documentation.Fakes.StubXmlCommentDocumentationProvider.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:MyEvents.Api.Documentation.Fakes.StubXmlCommentDocumentationProvider.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:MyEvents.Api.Documentation.Fakes.StubXmlCommentDocumentationProvider.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:MyEvents.Api.Fakes.ShimWebApiApplication">
            <summary>Shim type of MyEvents.Api.WebApiApplication</summary>
        </member>
        <member name="M:MyEvents.Api.Fakes.ShimWebApiApplication.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:MyEvents.Api.Fakes.ShimWebApiApplication.#ctor(MyEvents.Api.WebApiApplication)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:MyEvents.Api.Fakes.ShimWebApiApplication.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MyEvents.Api.Fakes.ShimWebApiApplication.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MyEvents.Api.Fakes.ShimWebApiApplication.Bind(System.ComponentModel.IComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:MyEvents.Api.Fakes.ShimWebApiApplication.Bind(System.Web.IHttpAsyncHandler)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:MyEvents.Api.Fakes.ShimWebApiApplication.Bind(System.Web.IHttpHandler)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:MyEvents.Api.Fakes.ShimWebApiApplication.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:MyEvents.Api.Fakes.ShimWebApiApplication.Application_Start">
            <summary>Sets the shim of WebApiApplication.Application_Start()</summary>
        </member>
        <member name="P:MyEvents.Api.Fakes.ShimWebApiApplication.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MyEvents.Api.Fakes.ShimWebApiApplication.Constructor">
            <summary>Sets the shim of WebApiApplication.WebApiApplication()</summary>
        </member>
        <member name="T:MyEvents.Api.Fakes.ShimWebApiApplication.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:MyEvents.Api.Fakes.ShimWebApiApplication.AllInstances.Application_Start">
            <summary>Sets the shim of WebApiApplication.Application_Start()</summary>
        </member>
        <member name="T:MyEvents.Api.Fakes.StubWebApiApplication">
            <summary>Stub type of MyEvents.Api.WebApiApplication</summary>
        </member>
        <member name="M:MyEvents.Api.Fakes.StubWebApiApplication.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:MyEvents.Api.Fakes.StubWebApiApplication.Dispose">
            <summary>Sets the stub of HttpApplication.Dispose()</summary>
        </member>
        <member name="F:MyEvents.Api.Fakes.StubWebApiApplication.Dispose01">
            <summary>Sets the stub of HttpApplication.Dispose()</summary>
        </member>
        <member name="M:MyEvents.Api.Fakes.StubWebApiApplication.GetOutputCacheProviderName(System.Web.HttpContext)">
            <summary>Sets the stub of HttpApplication.GetOutputCacheProviderName(HttpContext context)</summary>
        </member>
        <member name="F:MyEvents.Api.Fakes.StubWebApiApplication.GetOutputCacheProviderNameHttpContext">
            <summary>Sets the stub of HttpApplication.GetOutputCacheProviderName(HttpContext context)</summary>
        </member>
        <member name="M:MyEvents.Api.Fakes.StubWebApiApplication.GetVaryByCustomString(System.Web.HttpContext,System.String)">
            <summary>Sets the stub of HttpApplication.GetVaryByCustomString(HttpContext context, String custom)</summary>
        </member>
        <member name="F:MyEvents.Api.Fakes.StubWebApiApplication.GetVaryByCustomStringHttpContextString">
            <summary>Sets the stub of HttpApplication.GetVaryByCustomString(HttpContext context, String custom)</summary>
        </member>
        <member name="M:MyEvents.Api.Fakes.StubWebApiApplication.Init">
            <summary>Sets the stub of HttpApplication.Init()</summary>
        </member>
        <member name="F:MyEvents.Api.Fakes.StubWebApiApplication.Init01">
            <summary>Sets the stub of HttpApplication.Init()</summary>
        </member>
        <member name="M:MyEvents.Api.Fakes.StubWebApiApplication.InitializeStub">
            <summary>Initializes a new instance of type StubWebApiApplication</summary>
        </member>
        <member name="P:MyEvents.Api.Fakes.StubWebApiApplication.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:MyEvents.Api.Fakes.StubWebApiApplication.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:MyEvents.Api.Fakes.StubWebApiApplication.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:MyEvents.Api.Formatters.Fakes.ShimJsonpMediaTypeFormatter">
            <summary>Shim type of MyEvents.Api.Formatters.JsonpMediaTypeFormatter</summary>
        </member>
        <member name="M:MyEvents.Api.Formatters.Fakes.ShimJsonpMediaTypeFormatter.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:MyEvents.Api.Formatters.Fakes.ShimJsonpMediaTypeFormatter.#ctor(MyEvents.Api.Formatters.JsonpMediaTypeFormatter)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:MyEvents.Api.Formatters.Fakes.ShimJsonpMediaTypeFormatter.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MyEvents.Api.Formatters.Fakes.ShimJsonpMediaTypeFormatter.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MyEvents.Api.Formatters.Fakes.ShimJsonpMediaTypeFormatter.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MyEvents.Api.Formatters.Fakes.ShimJsonpMediaTypeFormatter.CallbackQueryParameterGet">
            <summary>Sets the shim of JsonpMediaTypeFormatter.get_CallbackQueryParameter()</summary>
        </member>
        <member name="P:MyEvents.Api.Formatters.Fakes.ShimJsonpMediaTypeFormatter.CallbackQueryParameterSetString">
            <summary>Sets the shim of JsonpMediaTypeFormatter.set_CallbackQueryParameter(String value)</summary>
        </member>
        <member name="P:MyEvents.Api.Formatters.Fakes.ShimJsonpMediaTypeFormatter.Constructor">
            <summary>Sets the shim of JsonpMediaTypeFormatter.JsonpMediaTypeFormatter()</summary>
        </member>
        <member name="P:MyEvents.Api.Formatters.Fakes.ShimJsonpMediaTypeFormatter.IsJsonpRequestStringOut">
            <summary>Sets the shim of JsonpMediaTypeFormatter.IsJsonpRequest(String&amp; callback)</summary>
        </member>
        <member name="P:MyEvents.Api.Formatters.Fakes.ShimJsonpMediaTypeFormatter.WriteToStreamAsyncTypeObjectStreamHttpContentHeadersTransportContext">
            <summary>Sets the shim of JsonpMediaTypeFormatter.WriteToStreamAsync(Type type, Object value, Stream stream, HttpContentHeaders contentHeaders, TransportContext transportContext)</summary>
        </member>
        <member name="P:MyEvents.Api.Formatters.Fakes.ShimJsonpMediaTypeFormatter._n__FabricatedMethod4TypeObjectStreamHttpContentHeadersTransportContext">
            <summary>Sets the shim of JsonpMediaTypeFormatter.&lt;&gt;n__FabricatedMethod4(Type , Object , Stream , HttpContentHeaders , TransportContext )</summary>
        </member>
        <member name="T:MyEvents.Api.Formatters.Fakes.ShimJsonpMediaTypeFormatter.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:MyEvents.Api.Formatters.Fakes.ShimJsonpMediaTypeFormatter.AllInstances.CallbackQueryParameterGet">
            <summary>Sets the shim of JsonpMediaTypeFormatter.get_CallbackQueryParameter()</summary>
        </member>
        <member name="P:MyEvents.Api.Formatters.Fakes.ShimJsonpMediaTypeFormatter.AllInstances.CallbackQueryParameterSetString">
            <summary>Sets the shim of JsonpMediaTypeFormatter.set_CallbackQueryParameter(String value)</summary>
        </member>
        <member name="P:MyEvents.Api.Formatters.Fakes.ShimJsonpMediaTypeFormatter.AllInstances.IsJsonpRequestStringOut">
            <summary>Sets the shim of JsonpMediaTypeFormatter.IsJsonpRequest(String&amp; callback)</summary>
        </member>
        <member name="P:MyEvents.Api.Formatters.Fakes.ShimJsonpMediaTypeFormatter.AllInstances.WriteToStreamAsyncTypeObjectStreamHttpContentHeadersTransportContext">
            <summary>Sets the shim of JsonpMediaTypeFormatter.WriteToStreamAsync(Type type, Object value, Stream stream, HttpContentHeaders contentHeaders, TransportContext transportContext)</summary>
        </member>
        <member name="P:MyEvents.Api.Formatters.Fakes.ShimJsonpMediaTypeFormatter.AllInstances._n__FabricatedMethod4TypeObjectStreamHttpContentHeadersTransportContext">
            <summary>Sets the shim of JsonpMediaTypeFormatter.&lt;&gt;n__FabricatedMethod4(Type , Object , Stream , HttpContentHeaders , TransportContext )</summary>
        </member>
        <member name="T:MyEvents.Api.Formatters.Fakes.StubJsonpMediaTypeFormatter">
            <summary>Stub type of MyEvents.Api.Formatters.JsonpMediaTypeFormatter</summary>
        </member>
        <member name="M:MyEvents.Api.Formatters.Fakes.StubJsonpMediaTypeFormatter.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:MyEvents.Api.Formatters.Fakes.StubJsonpMediaTypeFormatter.CanReadType(System.Type)">
            <summary>Sets the stub of JsonMediaTypeFormatter.CanReadType(Type type)</summary>
        </member>
        <member name="F:MyEvents.Api.Formatters.Fakes.StubJsonpMediaTypeFormatter.CanReadTypeType">
            <summary>Sets the stub of JsonMediaTypeFormatter.CanReadType(Type type)</summary>
        </member>
        <member name="M:MyEvents.Api.Formatters.Fakes.StubJsonpMediaTypeFormatter.CanWriteType(System.Type)">
            <summary>Sets the stub of JsonMediaTypeFormatter.CanWriteType(Type type)</summary>
        </member>
        <member name="F:MyEvents.Api.Formatters.Fakes.StubJsonpMediaTypeFormatter.CanWriteTypeType">
            <summary>Sets the stub of JsonMediaTypeFormatter.CanWriteType(Type type)</summary>
        </member>
        <member name="M:MyEvents.Api.Formatters.Fakes.StubJsonpMediaTypeFormatter.GetPerRequestFormatterInstance(System.Type,System.Net.Http.HttpRequestMessage,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>Sets the stub of MediaTypeFormatter.GetPerRequestFormatterInstance(Type type, HttpRequestMessage request, MediaTypeHeaderValue mediaType)</summary>
        </member>
        <member name="F:MyEvents.Api.Formatters.Fakes.StubJsonpMediaTypeFormatter.GetPerRequestFormatterInstanceTypeHttpRequestMessageMediaTypeHeaderValue">
            <summary>Sets the stub of MediaTypeFormatter.GetPerRequestFormatterInstance(Type type, HttpRequestMessage request, MediaTypeHeaderValue mediaType)</summary>
        </member>
        <member name="M:MyEvents.Api.Formatters.Fakes.StubJsonpMediaTypeFormatter.InitializeStub">
            <summary>Initializes a new instance of type StubJsonpMediaTypeFormatter</summary>
        </member>
        <member name="M:MyEvents.Api.Formatters.Fakes.StubJsonpMediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.Headers.HttpContentHeaders,System.Net.Http.Formatting.IFormatterLogger)">
            <summary>Sets the stub of JsonMediaTypeFormatter.ReadFromStreamAsync(Type type, Stream stream, HttpContentHeaders contentHeaders, IFormatterLogger formatterLogger)</summary>
        </member>
        <member name="F:MyEvents.Api.Formatters.Fakes.StubJsonpMediaTypeFormatter.ReadFromStreamAsyncTypeStreamHttpContentHeadersIFormatterLogger">
            <summary>Sets the stub of JsonMediaTypeFormatter.ReadFromStreamAsync(Type type, Stream stream, HttpContentHeaders contentHeaders, IFormatterLogger formatterLogger)</summary>
        </member>
        <member name="M:MyEvents.Api.Formatters.Fakes.StubJsonpMediaTypeFormatter.SetDefaultContentHeaders(System.Type,System.Net.Http.Headers.HttpContentHeaders,System.String)">
            <summary>Sets the stub of MediaTypeFormatter.SetDefaultContentHeaders(Type type, HttpContentHeaders headers, String mediaType)</summary>
        </member>
        <member name="F:MyEvents.Api.Formatters.Fakes.StubJsonpMediaTypeFormatter.SetDefaultContentHeadersTypeHttpContentHeadersString">
            <summary>Sets the stub of MediaTypeFormatter.SetDefaultContentHeaders(Type type, HttpContentHeaders headers, String mediaType)</summary>
        </member>
        <member name="M:MyEvents.Api.Formatters.Fakes.StubJsonpMediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.Headers.HttpContentHeaders,System.Net.TransportContext)">
            <summary>Sets the stub of JsonpMediaTypeFormatter.WriteToStreamAsync(Type type, Object value, Stream stream, HttpContentHeaders contentHeaders, TransportContext transportContext)</summary>
        </member>
        <member name="F:MyEvents.Api.Formatters.Fakes.StubJsonpMediaTypeFormatter.WriteToStreamAsyncTypeObjectStreamHttpContentHeadersTransportContext">
            <summary>Sets the stub of JsonpMediaTypeFormatter.WriteToStreamAsync(Type type, Object value, Stream stream, HttpContentHeaders contentHeaders, TransportContext transportContext)</summary>
        </member>
        <member name="P:MyEvents.Api.Formatters.Fakes.StubJsonpMediaTypeFormatter.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:MyEvents.Api.Formatters.Fakes.StubJsonpMediaTypeFormatter.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:MyEvents.Api.Formatters.Fakes.StubJsonpMediaTypeFormatter.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:MyEvents.Api.IoC.Fakes.ShimUnityDependencyResolver">
            <summary>Shim type of MyEvents.Api.IoC.UnityDependencyResolver</summary>
        </member>
        <member name="M:MyEvents.Api.IoC.Fakes.ShimUnityDependencyResolver.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:MyEvents.Api.IoC.Fakes.ShimUnityDependencyResolver.#ctor(MyEvents.Api.IoC.UnityDependencyResolver)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:MyEvents.Api.IoC.Fakes.ShimUnityDependencyResolver.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MyEvents.Api.IoC.Fakes.ShimUnityDependencyResolver.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MyEvents.Api.IoC.Fakes.ShimUnityDependencyResolver.Bind(System.Web.Http.Dependencies.IDependencyResolver)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:MyEvents.Api.IoC.Fakes.ShimUnityDependencyResolver.Bind(System.Web.Http.Dependencies.IDependencyScope)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:MyEvents.Api.IoC.Fakes.ShimUnityDependencyResolver.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:MyEvents.Api.IoC.Fakes.ShimUnityDependencyResolver.BeginScope">
            <summary>Sets the shim of UnityDependencyResolver.BeginScope()</summary>
        </member>
        <member name="P:MyEvents.Api.IoC.Fakes.ShimUnityDependencyResolver.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MyEvents.Api.IoC.Fakes.ShimUnityDependencyResolver.ConfigureContainer">
            <summary>Sets the shim of UnityDependencyResolver.ConfigureContainer()</summary>
        </member>
        <member name="P:MyEvents.Api.IoC.Fakes.ShimUnityDependencyResolver.Constructor">
            <summary>Sets the shim of UnityDependencyResolver.UnityDependencyResolver()</summary>
        </member>
        <member name="P:MyEvents.Api.IoC.Fakes.ShimUnityDependencyResolver.ContainerGet">
            <summary>Sets the shim of UnityDependencyResolver.get_Container()</summary>
        </member>
        <member name="P:MyEvents.Api.IoC.Fakes.ShimUnityDependencyResolver.Dispose">
            <summary>Sets the shim of UnityDependencyResolver.Dispose()</summary>
        </member>
        <member name="P:MyEvents.Api.IoC.Fakes.ShimUnityDependencyResolver.DisposeBoolean">
            <summary>Sets the shim of UnityDependencyResolver.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:MyEvents.Api.IoC.Fakes.ShimUnityDependencyResolver.GetServiceType">
            <summary>Sets the shim of UnityDependencyResolver.GetService(Type serviceType)</summary>
        </member>
        <member name="P:MyEvents.Api.IoC.Fakes.ShimUnityDependencyResolver.GetServicesType">
            <summary>Sets the shim of UnityDependencyResolver.GetServices(Type serviceType)</summary>
        </member>
        <member name="T:MyEvents.Api.IoC.Fakes.ShimUnityDependencyResolver.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:MyEvents.Api.IoC.Fakes.ShimUnityDependencyResolver.AllInstances.BeginScope">
            <summary>Sets the shim of UnityDependencyResolver.BeginScope()</summary>
        </member>
        <member name="P:MyEvents.Api.IoC.Fakes.ShimUnityDependencyResolver.AllInstances.ConfigureContainer">
            <summary>Sets the shim of UnityDependencyResolver.ConfigureContainer()</summary>
        </member>
        <member name="P:MyEvents.Api.IoC.Fakes.ShimUnityDependencyResolver.AllInstances.ContainerGet">
            <summary>Sets the shim of UnityDependencyResolver.get_Container()</summary>
        </member>
        <member name="P:MyEvents.Api.IoC.Fakes.ShimUnityDependencyResolver.AllInstances.Dispose">
            <summary>Sets the shim of UnityDependencyResolver.Dispose()</summary>
        </member>
        <member name="P:MyEvents.Api.IoC.Fakes.ShimUnityDependencyResolver.AllInstances.DisposeBoolean">
            <summary>Sets the shim of UnityDependencyResolver.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:MyEvents.Api.IoC.Fakes.ShimUnityDependencyResolver.AllInstances.GetServiceType">
            <summary>Sets the shim of UnityDependencyResolver.GetService(Type serviceType)</summary>
        </member>
        <member name="P:MyEvents.Api.IoC.Fakes.ShimUnityDependencyResolver.AllInstances.GetServicesType">
            <summary>Sets the shim of UnityDependencyResolver.GetServices(Type serviceType)</summary>
        </member>
        <member name="T:MyEvents.Api.IoC.Fakes.StubUnityDependencyResolver">
            <summary>Stub type of MyEvents.Api.IoC.UnityDependencyResolver</summary>
        </member>
        <member name="M:MyEvents.Api.IoC.Fakes.StubUnityDependencyResolver.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:MyEvents.Api.IoC.Fakes.StubUnityDependencyResolver.InitializeStub">
            <summary>Initializes a new instance of type StubUnityDependencyResolver</summary>
        </member>
        <member name="P:MyEvents.Api.IoC.Fakes.StubUnityDependencyResolver.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:MyEvents.Api.IoC.Fakes.StubUnityDependencyResolver.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:MyEvents.Api.IoC.Fakes.StubUnityDependencyResolver.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:MyEvents.Api.Mappers.Fakes.ShimEventDefinitionToScheduleViewModelMapper">
            <summary>Shim type of MyEvents.Api.Mappers.EventDefinitionToScheduleViewModelMapper</summary>
        </member>
        <member name="M:MyEvents.Api.Mappers.Fakes.ShimEventDefinitionToScheduleViewModelMapper.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:MyEvents.Api.Mappers.Fakes.ShimEventDefinitionToScheduleViewModelMapper.#ctor(MyEvents.Api.Mappers.EventDefinitionToScheduleViewModelMapper)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:MyEvents.Api.Mappers.Fakes.ShimEventDefinitionToScheduleViewModelMapper.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MyEvents.Api.Mappers.Fakes.ShimEventDefinitionToScheduleViewModelMapper.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MyEvents.Api.Mappers.Fakes.ShimEventDefinitionToScheduleViewModelMapper.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MyEvents.Api.Mappers.Fakes.ShimEventDefinitionToScheduleViewModelMapper.Constructor">
            <summary>Sets the shim of EventDefinitionToScheduleViewModelMapper.EventDefinitionToScheduleViewModelMapper()</summary>
        </member>
        <member name="P:MyEvents.Api.Mappers.Fakes.ShimEventDefinitionToScheduleViewModelMapper.GetScheduleSessionInt32Session">
            <summary>Sets the shim of EventDefinitionToScheduleViewModelMapper.GetScheduleSession(Int32 registeredUserId, Session session)</summary>
        </member>
        <member name="P:MyEvents.Api.Mappers.Fakes.ShimEventDefinitionToScheduleViewModelMapper.GetTimesEventDefinition">
            <summary>Sets the shim of EventDefinitionToScheduleViewModelMapper.GetTimes(EventDefinition eventDefinition)</summary>
        </member>
        <member name="P:MyEvents.Api.Mappers.Fakes.ShimEventDefinitionToScheduleViewModelMapper.GetViewModelEventDefinitionListOfDateTimeListOfScheduleSession">
            <summary>Sets the shim of EventDefinitionToScheduleViewModelMapper.GetViewModel(EventDefinition eventDefinition, List`1&lt;DateTime&gt; times, List`1&lt;ScheduleSession&gt; scheduleSessions)</summary>
        </member>
        <member name="P:MyEvents.Api.Mappers.Fakes.ShimEventDefinitionToScheduleViewModelMapper.MapInt32EventDefinition">
            <summary>Sets the shim of EventDefinitionToScheduleViewModelMapper.Map(Int32 registeredUserId, EventDefinition eventDefinition)</summary>
        </member>
        <member name="P:MyEvents.Api.Mappers.Fakes.ShimEventDefinitionToScheduleViewModelMapper._GetScheduleSessionb__8SessionRegisteredUser">
            <summary>Sets the shim of EventDefinitionToScheduleViewModelMapper.&lt;GetScheduleSession&gt;b__8(SessionRegisteredUser ru)</summary>
        </member>
        <member name="T:MyEvents.Api.Mappers.Fakes.ShimEventDefinitionToScheduleViewModelMapper.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:MyEvents.Api.Mappers.Fakes.ShimEventDefinitionToScheduleViewModelMapper.AllInstances.GetScheduleSessionInt32Session">
            <summary>Sets the shim of EventDefinitionToScheduleViewModelMapper.GetScheduleSession(Int32 registeredUserId, Session session)</summary>
        </member>
        <member name="P:MyEvents.Api.Mappers.Fakes.ShimEventDefinitionToScheduleViewModelMapper.AllInstances.GetTimesEventDefinition">
            <summary>Sets the shim of EventDefinitionToScheduleViewModelMapper.GetTimes(EventDefinition eventDefinition)</summary>
        </member>
        <member name="P:MyEvents.Api.Mappers.Fakes.ShimEventDefinitionToScheduleViewModelMapper.AllInstances.MapInt32EventDefinition">
            <summary>Sets the shim of EventDefinitionToScheduleViewModelMapper.Map(Int32 registeredUserId, EventDefinition eventDefinition)</summary>
        </member>
        <member name="T:MyEvents.Api.Mappers.Fakes.StubEventDefinitionToScheduleViewModelMapper">
            <summary>Stub type of MyEvents.Api.Mappers.EventDefinitionToScheduleViewModelMapper</summary>
        </member>
        <member name="M:MyEvents.Api.Mappers.Fakes.StubEventDefinitionToScheduleViewModelMapper.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:MyEvents.Api.Mappers.Fakes.StubEventDefinitionToScheduleViewModelMapper.InitializeStub">
            <summary>Initializes a new instance of type StubEventDefinitionToScheduleViewModelMapper</summary>
        </member>
        <member name="P:MyEvents.Api.Mappers.Fakes.StubEventDefinitionToScheduleViewModelMapper.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:MyEvents.Api.Mappers.Fakes.StubEventDefinitionToScheduleViewModelMapper.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:MyEvents.Api.Mappers.Fakes.StubEventDefinitionToScheduleViewModelMapper.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:MyEvents.Api.Models.Fakes.ShimSchedule">
            <summary>Shim type of MyEvents.Api.Models.Schedule</summary>
        </member>
        <member name="M:MyEvents.Api.Models.Fakes.ShimSchedule.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:MyEvents.Api.Models.Fakes.ShimSchedule.#ctor(MyEvents.Api.Models.Schedule)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:MyEvents.Api.Models.Fakes.ShimSchedule.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MyEvents.Api.Models.Fakes.ShimSchedule.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimSchedule.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimSchedule.Constructor">
            <summary>Sets the shim of Schedule.Schedule()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimSchedule.EventDefinitionGet">
            <summary>Sets the shim of Schedule.get_EventDefinition()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimSchedule.EventDefinitionSetScheduleEvent">
            <summary>Sets the shim of Schedule.set_EventDefinition(ScheduleEvent value)</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimSchedule.TimesGet">
            <summary>Sets the shim of Schedule.get_Times()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimSchedule.TimesSetListOfDateTime">
            <summary>Sets the shim of Schedule.set_Times(List`1&lt;DateTime&gt; value)</summary>
        </member>
        <member name="T:MyEvents.Api.Models.Fakes.ShimSchedule.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimSchedule.AllInstances.EventDefinitionGet">
            <summary>Sets the shim of Schedule.get_EventDefinition()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimSchedule.AllInstances.EventDefinitionSetScheduleEvent">
            <summary>Sets the shim of Schedule.set_EventDefinition(ScheduleEvent value)</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimSchedule.AllInstances.TimesGet">
            <summary>Sets the shim of Schedule.get_Times()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimSchedule.AllInstances.TimesSetListOfDateTime">
            <summary>Sets the shim of Schedule.set_Times(List`1&lt;DateTime&gt; value)</summary>
        </member>
        <member name="T:MyEvents.Api.Models.Fakes.ShimScheduleEvent">
            <summary>Shim type of MyEvents.Api.Models.ScheduleEvent</summary>
        </member>
        <member name="M:MyEvents.Api.Models.Fakes.ShimScheduleEvent.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:MyEvents.Api.Models.Fakes.ShimScheduleEvent.#ctor(MyEvents.Api.Models.ScheduleEvent)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:MyEvents.Api.Models.Fakes.ShimScheduleEvent.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MyEvents.Api.Models.Fakes.ShimScheduleEvent.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleEvent.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleEvent.Constructor">
            <summary>Sets the shim of ScheduleEvent.ScheduleEvent()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleEvent.EventDefinitionIdGet">
            <summary>Sets the shim of ScheduleEvent.get_EventDefinitionId()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleEvent.EventDefinitionIdSetInt32">
            <summary>Sets the shim of ScheduleEvent.set_EventDefinitionId(Int32 value)</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleEvent.RoomsGet">
            <summary>Sets the shim of ScheduleEvent.get_Rooms()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleEvent.RoomsSetInt32">
            <summary>Sets the shim of ScheduleEvent.set_Rooms(Int32 value)</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleEvent.SessionsGet">
            <summary>Sets the shim of ScheduleEvent.get_Sessions()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleEvent.SessionsSetListOfScheduleSession">
            <summary>Sets the shim of ScheduleEvent.set_Sessions(List`1&lt;ScheduleSession&gt; value)</summary>
        </member>
        <member name="T:MyEvents.Api.Models.Fakes.ShimScheduleEvent.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleEvent.AllInstances.EventDefinitionIdGet">
            <summary>Sets the shim of ScheduleEvent.get_EventDefinitionId()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleEvent.AllInstances.EventDefinitionIdSetInt32">
            <summary>Sets the shim of ScheduleEvent.set_EventDefinitionId(Int32 value)</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleEvent.AllInstances.RoomsGet">
            <summary>Sets the shim of ScheduleEvent.get_Rooms()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleEvent.AllInstances.RoomsSetInt32">
            <summary>Sets the shim of ScheduleEvent.set_Rooms(Int32 value)</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleEvent.AllInstances.SessionsGet">
            <summary>Sets the shim of ScheduleEvent.get_Sessions()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleEvent.AllInstances.SessionsSetListOfScheduleSession">
            <summary>Sets the shim of ScheduleEvent.set_Sessions(List`1&lt;ScheduleSession&gt; value)</summary>
        </member>
        <member name="T:MyEvents.Api.Models.Fakes.ShimScheduleSession">
            <summary>Shim type of MyEvents.Api.Models.ScheduleSession</summary>
        </member>
        <member name="M:MyEvents.Api.Models.Fakes.ShimScheduleSession.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:MyEvents.Api.Models.Fakes.ShimScheduleSession.#ctor(MyEvents.Api.Models.ScheduleSession)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:MyEvents.Api.Models.Fakes.ShimScheduleSession.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MyEvents.Api.Models.Fakes.ShimScheduleSession.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.Constructor">
            <summary>Sets the shim of ScheduleSession.ScheduleSession()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.DescriptionGet">
            <summary>Sets the shim of ScheduleSession.get_Description()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.DescriptionSetString">
            <summary>Sets the shim of ScheduleSession.set_Description(String value)</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.DurationGet">
            <summary>Sets the shim of ScheduleSession.get_Duration()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.DurationSetInt32">
            <summary>Sets the shim of ScheduleSession.set_Duration(Int32 value)</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.EndTimeGet">
            <summary>Sets the shim of ScheduleSession.get_EndTime()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.EventDefinitionIdGet">
            <summary>Sets the shim of ScheduleSession.get_EventDefinitionId()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.EventDefinitionIdSetInt32">
            <summary>Sets the shim of ScheduleSession.set_EventDefinitionId(Int32 value)</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.IsAssignedGet">
            <summary>Sets the shim of ScheduleSession.get_IsAssigned()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.IsFavoriteGet">
            <summary>Sets the shim of ScheduleSession.get_IsFavorite()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.IsFavoriteSetBoolean">
            <summary>Sets the shim of ScheduleSession.set_IsFavorite(Boolean value)</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.RoomNumberGet">
            <summary>Sets the shim of ScheduleSession.get_RoomNumber()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.RoomNumberSetInt32">
            <summary>Sets the shim of ScheduleSession.set_RoomNumber(Int32 value)</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.SessionIdGet">
            <summary>Sets the shim of ScheduleSession.get_SessionId()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.SessionIdSetInt32">
            <summary>Sets the shim of ScheduleSession.set_SessionId(Int32 value)</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.SessionRegisteredUsersGet">
            <summary>Sets the shim of ScheduleSession.get_SessionRegisteredUsers()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.SessionRegisteredUsersSetIEnumerableOfSessionRegisteredUser">
            <summary>Sets the shim of ScheduleSession.set_SessionRegisteredUsers(IEnumerable`1&lt;SessionRegisteredUser&gt; value)</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.SpeakerGet">
            <summary>Sets the shim of ScheduleSession.get_Speaker()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.SpeakerSetString">
            <summary>Sets the shim of ScheduleSession.set_Speaker(String value)</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.StartTimeGet">
            <summary>Sets the shim of ScheduleSession.get_StartTime()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.StartTimeSetDateTime">
            <summary>Sets the shim of ScheduleSession.set_StartTime(DateTime value)</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.TimeZoneOffsetGet">
            <summary>Sets the shim of ScheduleSession.get_TimeZoneOffset()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.TimeZoneOffsetSetInt32">
            <summary>Sets the shim of ScheduleSession.set_TimeZoneOffset(Int32 value)</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.TitleGet">
            <summary>Sets the shim of ScheduleSession.get_Title()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.TitleSetString">
            <summary>Sets the shim of ScheduleSession.set_Title(String value)</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.UserScoreGet">
            <summary>Sets the shim of ScheduleSession.get_UserScore()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.UserScoreSetDouble">
            <summary>Sets the shim of ScheduleSession.set_UserScore(Double value)</summary>
        </member>
        <member name="T:MyEvents.Api.Models.Fakes.ShimScheduleSession.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.AllInstances.DescriptionGet">
            <summary>Sets the shim of ScheduleSession.get_Description()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.AllInstances.DescriptionSetString">
            <summary>Sets the shim of ScheduleSession.set_Description(String value)</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.AllInstances.DurationGet">
            <summary>Sets the shim of ScheduleSession.get_Duration()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.AllInstances.DurationSetInt32">
            <summary>Sets the shim of ScheduleSession.set_Duration(Int32 value)</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.AllInstances.EndTimeGet">
            <summary>Sets the shim of ScheduleSession.get_EndTime()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.AllInstances.EventDefinitionIdGet">
            <summary>Sets the shim of ScheduleSession.get_EventDefinitionId()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.AllInstances.EventDefinitionIdSetInt32">
            <summary>Sets the shim of ScheduleSession.set_EventDefinitionId(Int32 value)</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.AllInstances.IsAssignedGet">
            <summary>Sets the shim of ScheduleSession.get_IsAssigned()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.AllInstances.IsFavoriteGet">
            <summary>Sets the shim of ScheduleSession.get_IsFavorite()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.AllInstances.IsFavoriteSetBoolean">
            <summary>Sets the shim of ScheduleSession.set_IsFavorite(Boolean value)</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.AllInstances.RoomNumberGet">
            <summary>Sets the shim of ScheduleSession.get_RoomNumber()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.AllInstances.RoomNumberSetInt32">
            <summary>Sets the shim of ScheduleSession.set_RoomNumber(Int32 value)</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.AllInstances.SessionIdGet">
            <summary>Sets the shim of ScheduleSession.get_SessionId()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.AllInstances.SessionIdSetInt32">
            <summary>Sets the shim of ScheduleSession.set_SessionId(Int32 value)</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.AllInstances.SessionRegisteredUsersGet">
            <summary>Sets the shim of ScheduleSession.get_SessionRegisteredUsers()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.AllInstances.SessionRegisteredUsersSetIEnumerableOfSessionRegisteredUser">
            <summary>Sets the shim of ScheduleSession.set_SessionRegisteredUsers(IEnumerable`1&lt;SessionRegisteredUser&gt; value)</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.AllInstances.SpeakerGet">
            <summary>Sets the shim of ScheduleSession.get_Speaker()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.AllInstances.SpeakerSetString">
            <summary>Sets the shim of ScheduleSession.set_Speaker(String value)</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.AllInstances.StartTimeGet">
            <summary>Sets the shim of ScheduleSession.get_StartTime()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.AllInstances.StartTimeSetDateTime">
            <summary>Sets the shim of ScheduleSession.set_StartTime(DateTime value)</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.AllInstances.TimeZoneOffsetGet">
            <summary>Sets the shim of ScheduleSession.get_TimeZoneOffset()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.AllInstances.TimeZoneOffsetSetInt32">
            <summary>Sets the shim of ScheduleSession.set_TimeZoneOffset(Int32 value)</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.AllInstances.TitleGet">
            <summary>Sets the shim of ScheduleSession.get_Title()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.AllInstances.TitleSetString">
            <summary>Sets the shim of ScheduleSession.set_Title(String value)</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.AllInstances.UserScoreGet">
            <summary>Sets the shim of ScheduleSession.get_UserScore()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimScheduleSession.AllInstances.UserScoreSetDouble">
            <summary>Sets the shim of ScheduleSession.set_UserScore(Double value)</summary>
        </member>
        <member name="T:MyEvents.Api.Models.Fakes.ShimSessionRegisteredUser">
            <summary>Shim type of MyEvents.Api.Models.SessionRegisteredUser</summary>
        </member>
        <member name="M:MyEvents.Api.Models.Fakes.ShimSessionRegisteredUser.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:MyEvents.Api.Models.Fakes.ShimSessionRegisteredUser.#ctor(MyEvents.Api.Models.SessionRegisteredUser)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:MyEvents.Api.Models.Fakes.ShimSessionRegisteredUser.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MyEvents.Api.Models.Fakes.ShimSessionRegisteredUser.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimSessionRegisteredUser.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimSessionRegisteredUser.Constructor">
            <summary>Sets the shim of SessionRegisteredUser.SessionRegisteredUser()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimSessionRegisteredUser.FacebookIdGet">
            <summary>Sets the shim of SessionRegisteredUser.get_FacebookId()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimSessionRegisteredUser.FacebookIdSetString">
            <summary>Sets the shim of SessionRegisteredUser.set_FacebookId(String value)</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimSessionRegisteredUser.RatedGet">
            <summary>Sets the shim of SessionRegisteredUser.get_Rated()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimSessionRegisteredUser.RatedSetBoolean">
            <summary>Sets the shim of SessionRegisteredUser.set_Rated(Boolean value)</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimSessionRegisteredUser.RegisteredUserIdGet">
            <summary>Sets the shim of SessionRegisteredUser.get_RegisteredUserId()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimSessionRegisteredUser.RegisteredUserIdSetInt32">
            <summary>Sets the shim of SessionRegisteredUser.set_RegisteredUserId(Int32 value)</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimSessionRegisteredUser.ScoreGet">
            <summary>Sets the shim of SessionRegisteredUser.get_Score()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimSessionRegisteredUser.ScoreSetDouble">
            <summary>Sets the shim of SessionRegisteredUser.set_Score(Double value)</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimSessionRegisteredUser.SessionIdGet">
            <summary>Sets the shim of SessionRegisteredUser.get_SessionId()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimSessionRegisteredUser.SessionIdSetInt32">
            <summary>Sets the shim of SessionRegisteredUser.set_SessionId(Int32 value)</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimSessionRegisteredUser.SessionRegisteredUserIdGet">
            <summary>Sets the shim of SessionRegisteredUser.get_SessionRegisteredUserId()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimSessionRegisteredUser.SessionRegisteredUserIdSetInt32">
            <summary>Sets the shim of SessionRegisteredUser.set_SessionRegisteredUserId(Int32 value)</summary>
        </member>
        <member name="T:MyEvents.Api.Models.Fakes.ShimSessionRegisteredUser.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimSessionRegisteredUser.AllInstances.FacebookIdGet">
            <summary>Sets the shim of SessionRegisteredUser.get_FacebookId()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimSessionRegisteredUser.AllInstances.FacebookIdSetString">
            <summary>Sets the shim of SessionRegisteredUser.set_FacebookId(String value)</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimSessionRegisteredUser.AllInstances.RatedGet">
            <summary>Sets the shim of SessionRegisteredUser.get_Rated()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimSessionRegisteredUser.AllInstances.RatedSetBoolean">
            <summary>Sets the shim of SessionRegisteredUser.set_Rated(Boolean value)</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimSessionRegisteredUser.AllInstances.RegisteredUserIdGet">
            <summary>Sets the shim of SessionRegisteredUser.get_RegisteredUserId()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimSessionRegisteredUser.AllInstances.RegisteredUserIdSetInt32">
            <summary>Sets the shim of SessionRegisteredUser.set_RegisteredUserId(Int32 value)</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimSessionRegisteredUser.AllInstances.ScoreGet">
            <summary>Sets the shim of SessionRegisteredUser.get_Score()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimSessionRegisteredUser.AllInstances.ScoreSetDouble">
            <summary>Sets the shim of SessionRegisteredUser.set_Score(Double value)</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimSessionRegisteredUser.AllInstances.SessionIdGet">
            <summary>Sets the shim of SessionRegisteredUser.get_SessionId()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimSessionRegisteredUser.AllInstances.SessionIdSetInt32">
            <summary>Sets the shim of SessionRegisteredUser.set_SessionId(Int32 value)</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimSessionRegisteredUser.AllInstances.SessionRegisteredUserIdGet">
            <summary>Sets the shim of SessionRegisteredUser.get_SessionRegisteredUserId()</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.ShimSessionRegisteredUser.AllInstances.SessionRegisteredUserIdSetInt32">
            <summary>Sets the shim of SessionRegisteredUser.set_SessionRegisteredUserId(Int32 value)</summary>
        </member>
        <member name="T:MyEvents.Api.Models.Fakes.StubSchedule">
            <summary>Stub type of MyEvents.Api.Models.Schedule</summary>
        </member>
        <member name="M:MyEvents.Api.Models.Fakes.StubSchedule.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:MyEvents.Api.Models.Fakes.StubSchedule.InitializeStub">
            <summary>Initializes a new instance of type StubSchedule</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.StubSchedule.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.StubSchedule.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.StubSchedule.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:MyEvents.Api.Models.Fakes.StubScheduleEvent">
            <summary>Stub type of MyEvents.Api.Models.ScheduleEvent</summary>
        </member>
        <member name="M:MyEvents.Api.Models.Fakes.StubScheduleEvent.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:MyEvents.Api.Models.Fakes.StubScheduleEvent.InitializeStub">
            <summary>Initializes a new instance of type StubScheduleEvent</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.StubScheduleEvent.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.StubScheduleEvent.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.StubScheduleEvent.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:MyEvents.Api.Models.Fakes.StubScheduleSession">
            <summary>Stub type of MyEvents.Api.Models.ScheduleSession</summary>
        </member>
        <member name="M:MyEvents.Api.Models.Fakes.StubScheduleSession.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:MyEvents.Api.Models.Fakes.StubScheduleSession.InitializeStub">
            <summary>Initializes a new instance of type StubScheduleSession</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.StubScheduleSession.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.StubScheduleSession.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.StubScheduleSession.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:MyEvents.Api.Models.Fakes.StubSessionRegisteredUser">
            <summary>Stub type of MyEvents.Api.Models.SessionRegisteredUser</summary>
        </member>
        <member name="M:MyEvents.Api.Models.Fakes.StubSessionRegisteredUser.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:MyEvents.Api.Models.Fakes.StubSessionRegisteredUser.InitializeStub">
            <summary>Initializes a new instance of type StubSessionRegisteredUser</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.StubSessionRegisteredUser.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.StubSessionRegisteredUser.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:MyEvents.Api.Models.Fakes.StubSessionRegisteredUser.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:MyEvents.Api.TraceWriters.Fakes.ShimMyEventsTracer">
            <summary>Shim type of MyEvents.Api.TraceWriters.MyEventsTracer</summary>
        </member>
        <member name="M:MyEvents.Api.TraceWriters.Fakes.ShimMyEventsTracer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:MyEvents.Api.TraceWriters.Fakes.ShimMyEventsTracer.#ctor(MyEvents.Api.TraceWriters.MyEventsTracer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:MyEvents.Api.TraceWriters.Fakes.ShimMyEventsTracer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MyEvents.Api.TraceWriters.Fakes.ShimMyEventsTracer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MyEvents.Api.TraceWriters.Fakes.ShimMyEventsTracer.Bind(System.Web.Http.Tracing.ITraceWriter)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:MyEvents.Api.TraceWriters.Fakes.ShimMyEventsTracer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MyEvents.Api.TraceWriters.Fakes.ShimMyEventsTracer.Constructor">
            <summary>Sets the shim of MyEventsTracer.MyEventsTracer()</summary>
        </member>
        <member name="P:MyEvents.Api.TraceWriters.Fakes.ShimMyEventsTracer.IsEnabledStringTraceLevel">
            <summary>Sets the shim of MyEventsTracer.IsEnabled(String category, TraceLevel level)</summary>
        </member>
        <member name="P:MyEvents.Api.TraceWriters.Fakes.ShimMyEventsTracer.TraceHttpRequestMessageStringTraceLevelActionOfTraceRecord">
            <summary>Sets the shim of MyEventsTracer.Trace(HttpRequestMessage request, String category, TraceLevel level, Action`1&lt;TraceRecord&gt; traceAction)</summary>
        </member>
        <member name="P:MyEvents.Api.TraceWriters.Fakes.ShimMyEventsTracer.WriteTraceTraceRecord">
            <summary>Sets the shim of MyEventsTracer.WriteTrace(TraceRecord rec)</summary>
        </member>
        <member name="T:MyEvents.Api.TraceWriters.Fakes.ShimMyEventsTracer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:MyEvents.Api.TraceWriters.Fakes.ShimMyEventsTracer.AllInstances.IsEnabledStringTraceLevel">
            <summary>Sets the shim of MyEventsTracer.IsEnabled(String category, TraceLevel level)</summary>
        </member>
        <member name="P:MyEvents.Api.TraceWriters.Fakes.ShimMyEventsTracer.AllInstances.TraceHttpRequestMessageStringTraceLevelActionOfTraceRecord">
            <summary>Sets the shim of MyEventsTracer.Trace(HttpRequestMessage request, String category, TraceLevel level, Action`1&lt;TraceRecord&gt; traceAction)</summary>
        </member>
        <member name="P:MyEvents.Api.TraceWriters.Fakes.ShimMyEventsTracer.AllInstances.WriteTraceTraceRecord">
            <summary>Sets the shim of MyEventsTracer.WriteTrace(TraceRecord rec)</summary>
        </member>
        <member name="T:MyEvents.Api.TraceWriters.Fakes.StubMyEventsTracer">
            <summary>Stub type of MyEvents.Api.TraceWriters.MyEventsTracer</summary>
        </member>
        <member name="M:MyEvents.Api.TraceWriters.Fakes.StubMyEventsTracer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:MyEvents.Api.TraceWriters.Fakes.StubMyEventsTracer.InitializeStub">
            <summary>Initializes a new instance of type StubMyEventsTracer</summary>
        </member>
        <member name="P:MyEvents.Api.TraceWriters.Fakes.StubMyEventsTracer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:MyEvents.Api.TraceWriters.Fakes.StubMyEventsTracer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:MyEvents.Api.TraceWriters.Fakes.StubMyEventsTracer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
    </members>
</doc>
